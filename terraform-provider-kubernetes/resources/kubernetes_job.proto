syntax="proto3";

package kubernetes;

message KubernetesJob {
  string id = 1;
  message Metadata {

    // An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2;

    // A sequence number representing a specific generation of the desired state.
    int64  generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the job, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the job must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7;

    // A URL representing this job.
    string self_link = 8;

    // The unique in time and space value for this job. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 9;
  }
  repeated Metadata metadata = 2;
  message Spec {

    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    int64  active_deadline_seconds = 1;

    // Specifies the number of retries before marking this job failed. Defaults to 6
    int64  backoff_limit = 2;

    // Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    int64  completions = 3;

    // Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsyble for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
    bool   manual_selector = 4;

    // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    int64  parallelism = 5;

    // ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
    int64  ttl_seconds_after_finished = 6;
    message Selector {

      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1;
      message MatchExpressions {

        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
      repeated MatchExpressions match_expressions = 2;
    }
    repeated Selector selector = 7;
    message Template {
      message Metadata {

        // An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        map<string, string> annotations = 1;

        // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
        string generate_name = 2;

        // A sequence number representing a specific generation of the desired state.
        int64  generation = 3;

        // Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        map<string, string> labels = 4;

        // Name of the job, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        string name = 5;

        // An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        string resource_version = 6;

        // A URL representing this job.
        string self_link = 7;

        // The unique in time and space value for this job. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        string uid = 8;
      }
      repeated Metadata metadata = 1;
      message Spec {

        // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        int64  active_deadline_seconds = 1;

        // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        bool   automount_service_account_token = 2;

        // Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Optional: Defaults to 'ClusterFirst', see [Kubernetes reference](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy).
        string dns_policy = 3;

        // Use the host's ipc namespace. Optional: Defaults to false.
        bool   host_ipc = 4;

        // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
        bool   host_network = 5;

        // Use the host's pid namespace.
        bool   host_pid = 6;

        // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        string hostname = 7;

        // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        string node_name = 8;

        // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection.
        map<string, string> node_selector = 9;

        // If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        string priority_class_name = 10;

        // Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy.
        string restart_policy = 11;

        // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
        string service_account_name = 12;

        // Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
        bool   share_process_namespace = 13;

        // If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
        string subdomain = 14;

        // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
        int64  termination_grace_period_seconds = 15;
        message Affinity {
          message NodeAffinity {
            message PreferredDuringSchedulingIgnoredDuringExecution {

              // weight is in the range 1-100
              int64  weight = 1;
              message Preference {
                message MatchExpressions {

                  // The label key that the selector applies to.
                  string key = 1;

                  // Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                  string operator = 2;

                  // Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                  repeated string values = 3;
                }
                repeated MatchExpressions match_expressions = 1;
              }
              repeated Preference preference = 2;
            }
            repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1;
            message RequiredDuringSchedulingIgnoredDuringExecution {
              message NodeSelectorTerm {
                message MatchExpressions {

                  // The label key that the selector applies to.
                  string key = 1;

                  // Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                  string operator = 2;

                  // Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                  repeated string values = 3;
                }
                repeated MatchExpressions match_expressions = 1;
              }
              repeated NodeSelectorTerm node_selector_term = 1;
            }
            repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2;
          }
          repeated NodeAffinity node_affinity = 1;
          message PodAffinity {
            message PreferredDuringSchedulingIgnoredDuringExecution {

              // weight associated with matching the corresponding podAffinityTerm, in the range 1-100
              int64  weight = 1;
              message PodAffinityTerm {

                // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
                repeated string namespaces = 1;

                // empty topology key is interpreted by the scheduler as 'all topologies'
                string topology_key = 2;
                message LabelSelector {

                  // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                  map<string, string> match_labels = 1;
                  message MatchExpressions {

                    // The label key that the selector applies to.
                    string key = 1;

                    // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                    string operator = 2;

                    // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                    repeated string values = 3;
                  }
                  repeated MatchExpressions match_expressions = 2;
                }
                repeated LabelSelector label_selector = 3;
              }
              repeated PodAffinityTerm pod_affinity_term = 2;
            }
            repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1;
            message RequiredDuringSchedulingIgnoredDuringExecution {

              // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
              repeated string namespaces = 1;

              // empty topology key is interpreted by the scheduler as 'all topologies'
              string topology_key = 2;
              message LabelSelector {

                // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                map<string, string> match_labels = 1;
                message MatchExpressions {

                  // The label key that the selector applies to.
                  string key = 1;

                  // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                  string operator = 2;

                  // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                  repeated string values = 3;
                }
                repeated MatchExpressions match_expressions = 2;
              }
              repeated LabelSelector label_selector = 3;
            }
            repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2;
          }
          repeated PodAffinity pod_affinity = 2;
          message PodAntiAffinity {
            message PreferredDuringSchedulingIgnoredDuringExecution {

              // weight associated with matching the corresponding podAffinityTerm, in the range 1-100
              int64  weight = 1;
              message PodAffinityTerm {

                // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
                repeated string namespaces = 1;

                // empty topology key is interpreted by the scheduler as 'all topologies'
                string topology_key = 2;
                message LabelSelector {

                  // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                  map<string, string> match_labels = 1;
                  message MatchExpressions {

                    // The label key that the selector applies to.
                    string key = 1;

                    // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                    string operator = 2;

                    // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                    repeated string values = 3;
                  }
                  repeated MatchExpressions match_expressions = 2;
                }
                repeated LabelSelector label_selector = 3;
              }
              repeated PodAffinityTerm pod_affinity_term = 2;
            }
            repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1;
            message RequiredDuringSchedulingIgnoredDuringExecution {

              // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
              repeated string namespaces = 1;

              // empty topology key is interpreted by the scheduler as 'all topologies'
              string topology_key = 2;
              message LabelSelector {

                // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                map<string, string> match_labels = 1;
                message MatchExpressions {

                  // The label key that the selector applies to.
                  string key = 1;

                  // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                  string operator = 2;

                  // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                  repeated string values = 3;
                }
                repeated MatchExpressions match_expressions = 2;
              }
              repeated LabelSelector label_selector = 3;
            }
            repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2;
          }
          repeated PodAntiAffinity pod_anti_affinity = 3;
        }
        repeated Affinity affinity = 16;
        message Container {

          // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
          repeated string args = 1;

          // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
          repeated string command = 2;

          // Docker image name. More info: http://kubernetes.io/docs/user-guide/images
          string image = 3;

          // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
          string image_pull_policy = 4;

          // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
          string name = 5;

          // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. 
          bool   stdin = 6;

          // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
          bool   stdin_once = 7;

          // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
          string termination_message_path = 8;

          // Whether this container should allocate a TTY for itself
          bool   tty = 9;

          // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
          string working_dir = 10;
          message Env {

            // Name of the environment variable. Must be a C_IDENTIFIER
            string name = 1;

            // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            string value = 2;
            message ValueFrom {
              message ConfigMapKeyRef {

                // The key to select.
                string key = 1;

                // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
                string name = 2;
              }
              repeated ConfigMapKeyRef config_map_key_ref = 1;
              message FieldRef {

                // Version of the schema the FieldPath is written in terms of, defaults to "v1".
                string api_version = 1;

                // Path of the field to select in the specified API version
                string field_path = 2;
              }
              repeated FieldRef field_ref = 2;
              message ResourceFieldRef {
                string container_name = 1;

                // Resource to select
                string resource = 2;
              }
              repeated ResourceFieldRef resource_field_ref = 3;
              message SecretKeyRef {

                // The key of the secret to select from. Must be a valid secret key.
                string key = 1;

                // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
                string name = 2;
              }
              repeated SecretKeyRef secret_key_ref = 4;
            }
            repeated ValueFrom value_from = 3;
          }
          repeated Env env = 11;
          message EnvFrom {

            // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
            string prefix = 1;
            message ConfigMapRef {

              // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
              string name = 1;

              // Specify whether the ConfigMap must be defined
              bool   optional = 2;
            }
            repeated ConfigMapRef config_map_ref = 2;
            message SecretRef {

              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
              string name = 1;

              // Specify whether the Secret must be defined
              bool   optional = 2;
            }
            repeated SecretRef secret_ref = 3;
          }
          repeated EnvFrom env_from = 12;
          message Lifecycle {
            message PostStart {
              message Exec {

                // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                repeated string command = 1;
              }
              repeated Exec exec = 1;
              message HttpGet {

                // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                string host = 1;

                // Path to access on the HTTP server.
                string path = 2;

                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 3;

                // Scheme to use for connecting to the host.
                string scheme = 4;
                message HttpHeader {

                  // The header field name
                  string name = 1;

                  // The header field value
                  string value = 2;
                }
                repeated HttpHeader http_header = 5;
              }
              repeated HttpGet http_get = 2;
              message TcpSocket {

                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 1;
              }
              repeated TcpSocket tcp_socket = 3;
            }
            repeated PostStart post_start = 1;
            message PreStop {
              message Exec {

                // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                repeated string command = 1;
              }
              repeated Exec exec = 1;
              message HttpGet {

                // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                string host = 1;

                // Path to access on the HTTP server.
                string path = 2;

                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 3;

                // Scheme to use for connecting to the host.
                string scheme = 4;
                message HttpHeader {

                  // The header field name
                  string name = 1;

                  // The header field value
                  string value = 2;
                }
                repeated HttpHeader http_header = 5;
              }
              repeated HttpGet http_get = 2;
              message TcpSocket {

                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 1;
              }
              repeated TcpSocket tcp_socket = 3;
            }
            repeated PreStop pre_stop = 2;
          }
          repeated Lifecycle lifecycle = 13;
          message LivenessProbe {

            // Minimum consecutive failures for the probe to be considered failed after having succeeded.
            int64  failure_threshold = 1;

            // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  initial_delay_seconds = 2;

            // How often (in seconds) to perform the probe
            int64  period_seconds = 3;

            // Minimum consecutive successes for the probe to be considered successful after having failed.
            int64  success_threshold = 4;

            // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  timeout_seconds = 5;
            message Exec {

              // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              repeated string command = 1;
            }
            repeated Exec exec = 6;
            message HttpGet {

              // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              string host = 1;

              // Path to access on the HTTP server.
              string path = 2;

              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 3;

              // Scheme to use for connecting to the host.
              string scheme = 4;
              message HttpHeader {

                // The header field name
                string name = 1;

                // The header field value
                string value = 2;
              }
              repeated HttpHeader http_header = 5;
            }
            repeated HttpGet http_get = 7;
            message TcpSocket {

              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 1;
            }
            repeated TcpSocket tcp_socket = 8;
          }
          repeated LivenessProbe liveness_probe = 14;
          message Port {

            // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
            int64  container_port = 1;

            // What host IP to bind the external port to.
            string host_ip = 2;

            // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
            int64  host_port = 3;

            // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
            string name = 4;

            // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
            string protocol = 5;
          }
          repeated Port port = 15;
          message ReadinessProbe {

            // Minimum consecutive failures for the probe to be considered failed after having succeeded.
            int64  failure_threshold = 1;

            // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  initial_delay_seconds = 2;

            // How often (in seconds) to perform the probe
            int64  period_seconds = 3;

            // Minimum consecutive successes for the probe to be considered successful after having failed.
            int64  success_threshold = 4;

            // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  timeout_seconds = 5;
            message Exec {

              // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              repeated string command = 1;
            }
            repeated Exec exec = 6;
            message HttpGet {

              // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              string host = 1;

              // Path to access on the HTTP server.
              string path = 2;

              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 3;

              // Scheme to use for connecting to the host.
              string scheme = 4;
              message HttpHeader {

                // The header field name
                string name = 1;

                // The header field value
                string value = 2;
              }
              repeated HttpHeader http_header = 5;
            }
            repeated HttpGet http_get = 7;
            message TcpSocket {

              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 1;
            }
            repeated TcpSocket tcp_socket = 8;
          }
          repeated ReadinessProbe readiness_probe = 16;
          message Resources {
            message Limits {
              string cpu = 1;
              string memory = 2;
            }
            repeated Limits limits = 1;
            message Requests {
              string cpu = 1;
              string memory = 2;
            }
            repeated Requests requests = 2;
          }
          repeated Resources resources = 17;
          message SecurityContext {

            // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
            bool   allow_privilege_escalation = 1;

            // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
            bool   privileged = 2;

            // Whether this container has a read-only root filesystem. Default is false.
            bool   read_only_root_filesystem = 3;

            // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            int64  run_as_group = 4;

            // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            bool   run_as_non_root = 5;

            // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            int64  run_as_user = 6;
            message Capabilities {

              // Added capabilities
              repeated string add = 1;

              // Removed capabilities
              repeated string drop = 2;
            }
            repeated Capabilities capabilities = 7;
            message SeLinuxOptions {

              // Level is SELinux level label that applies to the container.
              string level = 1;

              // Role is a SELinux role label that applies to the container.
              string role = 2;

              // Type is a SELinux type label that applies to the container.
              string type = 3;

              // User is a SELinux user label that applies to the container.
              string user = 4;
            }
            repeated SeLinuxOptions se_linux_options = 8;
          }
          repeated SecurityContext security_context = 18;
          message StartupProbe {

            // Minimum consecutive failures for the probe to be considered failed after having succeeded.
            int64  failure_threshold = 1;

            // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  initial_delay_seconds = 2;

            // How often (in seconds) to perform the probe
            int64  period_seconds = 3;

            // Minimum consecutive successes for the probe to be considered successful after having failed.
            int64  success_threshold = 4;

            // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  timeout_seconds = 5;
            message Exec {

              // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              repeated string command = 1;
            }
            repeated Exec exec = 6;
            message HttpGet {

              // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              string host = 1;

              // Path to access on the HTTP server.
              string path = 2;

              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 3;

              // Scheme to use for connecting to the host.
              string scheme = 4;
              message HttpHeader {

                // The header field name
                string name = 1;

                // The header field value
                string value = 2;
              }
              repeated HttpHeader http_header = 5;
            }
            repeated HttpGet http_get = 7;
            message TcpSocket {

              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 1;
            }
            repeated TcpSocket tcp_socket = 8;
          }
          repeated StartupProbe startup_probe = 19;
          message VolumeMount {

            // Path within the container at which the volume should be mounted. Must not contain ':'.
            string mount_path = 1;

            // Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
            string mount_propagation = 2;

            // This must match the Name of a Volume.
            string name = 3;

            // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
            bool   read_only = 4;

            // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
            string sub_path = 5;
          }
          repeated VolumeMount volume_mount = 20;
        }
        repeated Container container = 17;
        message DnsConfig {

          // A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
          repeated string nameservers = 1;

          // A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
          repeated string searches = 2;
          message Option {

            // Name of the option.
            string name = 1;

            // Value of the option. Optional: Defaults to empty.
            string value = 2;
          }
          repeated Option option = 3;
        }
        repeated DnsConfig dns_config = 18;
        message HostAliases {

          // Hostnames for the IP address.
          repeated string hostnames = 1;

          // IP address of the host file entry.
          string ip = 2;
        }
        repeated HostAliases host_aliases = 19;
        message ImagePullSecrets {

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;
        }
        repeated ImagePullSecrets image_pull_secrets = 20;
        message InitContainer {

          // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
          repeated string args = 1;

          // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
          repeated string command = 2;

          // Docker image name. More info: http://kubernetes.io/docs/user-guide/images
          string image = 3;

          // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
          string image_pull_policy = 4;

          // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
          string name = 5;

          // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. 
          bool   stdin = 6;

          // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
          bool   stdin_once = 7;

          // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
          string termination_message_path = 8;

          // Whether this container should allocate a TTY for itself
          bool   tty = 9;

          // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
          string working_dir = 10;
          message Env {

            // Name of the environment variable. Must be a C_IDENTIFIER
            string name = 1;

            // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            string value = 2;
            message ValueFrom {
              message ConfigMapKeyRef {

                // The key to select.
                string key = 1;

                // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
                string name = 2;
              }
              repeated ConfigMapKeyRef config_map_key_ref = 1;
              message FieldRef {

                // Version of the schema the FieldPath is written in terms of, defaults to "v1".
                string api_version = 1;

                // Path of the field to select in the specified API version
                string field_path = 2;
              }
              repeated FieldRef field_ref = 2;
              message ResourceFieldRef {
                string container_name = 1;

                // Resource to select
                string resource = 2;
              }
              repeated ResourceFieldRef resource_field_ref = 3;
              message SecretKeyRef {

                // The key of the secret to select from. Must be a valid secret key.
                string key = 1;

                // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
                string name = 2;
              }
              repeated SecretKeyRef secret_key_ref = 4;
            }
            repeated ValueFrom value_from = 3;
          }
          repeated Env env = 11;
          message EnvFrom {

            // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
            string prefix = 1;
            message ConfigMapRef {

              // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
              string name = 1;

              // Specify whether the ConfigMap must be defined
              bool   optional = 2;
            }
            repeated ConfigMapRef config_map_ref = 2;
            message SecretRef {

              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
              string name = 1;

              // Specify whether the Secret must be defined
              bool   optional = 2;
            }
            repeated SecretRef secret_ref = 3;
          }
          repeated EnvFrom env_from = 12;
          message Lifecycle {
            message PostStart {
              message Exec {

                // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                repeated string command = 1;
              }
              repeated Exec exec = 1;
              message HttpGet {

                // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                string host = 1;

                // Path to access on the HTTP server.
                string path = 2;

                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 3;

                // Scheme to use for connecting to the host.
                string scheme = 4;
                message HttpHeader {

                  // The header field name
                  string name = 1;

                  // The header field value
                  string value = 2;
                }
                repeated HttpHeader http_header = 5;
              }
              repeated HttpGet http_get = 2;
              message TcpSocket {

                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 1;
              }
              repeated TcpSocket tcp_socket = 3;
            }
            repeated PostStart post_start = 1;
            message PreStop {
              message Exec {

                // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                repeated string command = 1;
              }
              repeated Exec exec = 1;
              message HttpGet {

                // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                string host = 1;

                // Path to access on the HTTP server.
                string path = 2;

                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 3;

                // Scheme to use for connecting to the host.
                string scheme = 4;
                message HttpHeader {

                  // The header field name
                  string name = 1;

                  // The header field value
                  string value = 2;
                }
                repeated HttpHeader http_header = 5;
              }
              repeated HttpGet http_get = 2;
              message TcpSocket {

                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                string port = 1;
              }
              repeated TcpSocket tcp_socket = 3;
            }
            repeated PreStop pre_stop = 2;
          }
          repeated Lifecycle lifecycle = 13;
          message LivenessProbe {

            // Minimum consecutive failures for the probe to be considered failed after having succeeded.
            int64  failure_threshold = 1;

            // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  initial_delay_seconds = 2;

            // How often (in seconds) to perform the probe
            int64  period_seconds = 3;

            // Minimum consecutive successes for the probe to be considered successful after having failed.
            int64  success_threshold = 4;

            // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  timeout_seconds = 5;
            message Exec {

              // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              repeated string command = 1;
            }
            repeated Exec exec = 6;
            message HttpGet {

              // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              string host = 1;

              // Path to access on the HTTP server.
              string path = 2;

              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 3;

              // Scheme to use for connecting to the host.
              string scheme = 4;
              message HttpHeader {

                // The header field name
                string name = 1;

                // The header field value
                string value = 2;
              }
              repeated HttpHeader http_header = 5;
            }
            repeated HttpGet http_get = 7;
            message TcpSocket {

              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 1;
            }
            repeated TcpSocket tcp_socket = 8;
          }
          repeated LivenessProbe liveness_probe = 14;
          message Port {

            // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
            int64  container_port = 1;

            // What host IP to bind the external port to.
            string host_ip = 2;

            // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
            int64  host_port = 3;

            // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
            string name = 4;

            // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
            string protocol = 5;
          }
          repeated Port port = 15;
          message ReadinessProbe {

            // Minimum consecutive failures for the probe to be considered failed after having succeeded.
            int64  failure_threshold = 1;

            // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  initial_delay_seconds = 2;

            // How often (in seconds) to perform the probe
            int64  period_seconds = 3;

            // Minimum consecutive successes for the probe to be considered successful after having failed.
            int64  success_threshold = 4;

            // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  timeout_seconds = 5;
            message Exec {

              // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              repeated string command = 1;
            }
            repeated Exec exec = 6;
            message HttpGet {

              // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              string host = 1;

              // Path to access on the HTTP server.
              string path = 2;

              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 3;

              // Scheme to use for connecting to the host.
              string scheme = 4;
              message HttpHeader {

                // The header field name
                string name = 1;

                // The header field value
                string value = 2;
              }
              repeated HttpHeader http_header = 5;
            }
            repeated HttpGet http_get = 7;
            message TcpSocket {

              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 1;
            }
            repeated TcpSocket tcp_socket = 8;
          }
          repeated ReadinessProbe readiness_probe = 16;
          message Resources {
            message Limits {
              string cpu = 1;
              string memory = 2;
            }
            repeated Limits limits = 1;
            message Requests {
              string cpu = 1;
              string memory = 2;
            }
            repeated Requests requests = 2;
          }
          repeated Resources resources = 17;
          message SecurityContext {

            // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
            bool   allow_privilege_escalation = 1;

            // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
            bool   privileged = 2;

            // Whether this container has a read-only root filesystem. Default is false.
            bool   read_only_root_filesystem = 3;

            // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            int64  run_as_group = 4;

            // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            bool   run_as_non_root = 5;

            // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            int64  run_as_user = 6;
            message Capabilities {

              // Added capabilities
              repeated string add = 1;

              // Removed capabilities
              repeated string drop = 2;
            }
            repeated Capabilities capabilities = 7;
            message SeLinuxOptions {

              // Level is SELinux level label that applies to the container.
              string level = 1;

              // Role is a SELinux role label that applies to the container.
              string role = 2;

              // Type is a SELinux type label that applies to the container.
              string type = 3;

              // User is a SELinux user label that applies to the container.
              string user = 4;
            }
            repeated SeLinuxOptions se_linux_options = 8;
          }
          repeated SecurityContext security_context = 18;
          message StartupProbe {

            // Minimum consecutive failures for the probe to be considered failed after having succeeded.
            int64  failure_threshold = 1;

            // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  initial_delay_seconds = 2;

            // How often (in seconds) to perform the probe
            int64  period_seconds = 3;

            // Minimum consecutive successes for the probe to be considered successful after having failed.
            int64  success_threshold = 4;

            // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
            int64  timeout_seconds = 5;
            message Exec {

              // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              repeated string command = 1;
            }
            repeated Exec exec = 6;
            message HttpGet {

              // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              string host = 1;

              // Path to access on the HTTP server.
              string path = 2;

              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 3;

              // Scheme to use for connecting to the host.
              string scheme = 4;
              message HttpHeader {

                // The header field name
                string name = 1;

                // The header field value
                string value = 2;
              }
              repeated HttpHeader http_header = 5;
            }
            repeated HttpGet http_get = 7;
            message TcpSocket {

              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              string port = 1;
            }
            repeated TcpSocket tcp_socket = 8;
          }
          repeated StartupProbe startup_probe = 19;
          message VolumeMount {

            // Path within the container at which the volume should be mounted. Must not contain ':'.
            string mount_path = 1;

            // Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
            string mount_propagation = 2;

            // This must match the Name of a Volume.
            string name = 3;

            // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
            bool   read_only = 4;

            // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
            string sub_path = 5;
          }
          repeated VolumeMount volume_mount = 20;
        }
        repeated InitContainer init_container = 21;
        message SecurityContext {

          // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
          int64  fs_group = 1;

          // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
          int64  run_as_group = 2;

          // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          bool   run_as_non_root = 3;

          // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
          int64  run_as_user = 4;

          // A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
          repeated int64 supplemental_groups = 5;
          message SeLinuxOptions {

            // Level is SELinux level label that applies to the container.
            string level = 1;

            // Role is a SELinux role label that applies to the container.
            string role = 2;

            // Type is a SELinux type label that applies to the container.
            string type = 3;

            // User is a SELinux user label that applies to the container.
            string user = 4;
          }
          repeated SeLinuxOptions se_linux_options = 6;
        }
        repeated SecurityContext security_context = 22;
        message Toleration {

          // Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
          string effect = 1;

          // Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          string key = 2;

          // Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
          string operator = 3;

          // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
          string toleration_seconds = 4;

          // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
          string value = 5;
        }
        repeated Toleration toleration = 23;
        message Volume {

          // Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;
          message AwsElasticBlockStore {

            // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
            string fs_type = 1;

            // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
            int64  partition = 2;

            // Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
            bool   read_only = 3;

            // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
            string volume_id = 4;
          }
          repeated AwsElasticBlockStore aws_elastic_block_store = 2;
          message AzureDisk {

            // Host Caching mode: None, Read Only, Read Write.
            string caching_mode = 1;

            // The URI the data disk in the blob storage
            string data_disk_uri = 2;

            // The Name of the data disk in the blob storage
            string disk_name = 3;

            // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            string fs_type = 4;

            // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
            bool   read_only = 5;
          }
          repeated AzureDisk azure_disk = 3;
          message AzureFile {

            // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
            bool   read_only = 1;

            // The name of secret that contains Azure Storage Account Name and Key
            string secret_name = 2;

            // Share Name
            string share_name = 3;
          }
          repeated AzureFile azure_file = 4;
          message CephFs {

            // Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
            repeated string monitors = 1;

            // Used as the mounted root, rather than the full Ceph tree, default is /
            string path = 2;

            // Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
            bool   read_only = 3;

            // The path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
            string secret_file = 4;

            // User is the rados user name, default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
            string user = 5;
            message SecretRef {

              // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
              string name = 1;
            }
            repeated SecretRef secret_ref = 6;
          }
          repeated CephFs ceph_fs = 5;
          message Cinder {

            // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
            string fs_type = 1;

            // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
            bool   read_only = 2;

            // Volume ID used to identify the volume in Cinder. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
            string volume_id = 3;
          }
          repeated Cinder cinder = 6;
          message ConfigMap {

            // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
            string default_mode = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;
            message Items {

              // The key to project.
              string key = 1;

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 2;

              // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
              string path = 3;
            }
            repeated Items items = 3;
          }
          repeated ConfigMap config_map = 7;
          message DownwardApi {

            // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
            string default_mode = 1;
            message Items {

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 1;

              // Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
              string path = 2;
              message FieldRef {

                // Version of the schema the FieldPath is written in terms of, defaults to "v1".
                string api_version = 1;

                // Path of the field to select in the specified API version
                string field_path = 2;
              }
              repeated FieldRef field_ref = 3;
              message ResourceFieldRef {
                string container_name = 1;
                string quantity = 2;

                // Resource to select
                string resource = 3;
              }
              repeated ResourceFieldRef resource_field_ref = 4;
            }
            repeated Items items = 2;
          }
          repeated DownwardApi downward_api = 8;
          message EmptyDir {

            // What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
            string medium = 1;
          }
          repeated EmptyDir empty_dir = 9;
          message Fc {

            // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            string fs_type = 1;

            // FC target lun number
            int64  lun = 2;

            // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
            bool   read_only = 3;

            // FC target worldwide names (WWNs)
            repeated string target_ww_ns = 4;
          }
          repeated Fc fc = 10;
          message FlexVolume {

            // Driver is the name of the driver to use for this volume.
            string driver = 1;

            // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
            string fs_type = 2;

            // Extra command options if any.
            map<string, string> options = 3;

            // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
            bool   read_only = 4;
            message SecretRef {

              // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
              string name = 1;
            }
            repeated SecretRef secret_ref = 5;
          }
          repeated FlexVolume flex_volume = 11;
          message Flocker {

            // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
            string dataset_name = 1;

            // UUID of the dataset. This is unique identifier of a Flocker dataset
            string dataset_uuid = 2;
          }
          repeated Flocker flocker = 12;
          message GcePersistentDisk {

            // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
            string fs_type = 1;

            // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
            int64  partition = 2;

            // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
            string pd_name = 3;

            // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
            bool   read_only = 4;
          }
          repeated GcePersistentDisk gce_persistent_disk = 13;
          message GitRepo {

            // Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
            string directory = 1;

            // Repository URL
            string repository = 2;

            // Commit hash for the specified revision.
            string revision = 3;
          }
          repeated GitRepo git_repo = 14;
          message Glusterfs {

            // The endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
            string endpoints_name = 1;

            // The Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
            string path = 2;

            // Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
            bool   read_only = 3;
          }
          repeated Glusterfs glusterfs = 15;
          message HostPath {

            // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
            string path = 1;

            // Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
            string type = 2;
          }
          repeated HostPath host_path = 16;
          message Iscsi {

            // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi
            string fs_type = 1;

            // Target iSCSI Qualified Name.
            string iqn = 2;

            // iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
            string iscsi_interface = 3;

            // iSCSI target lun number.
            int64  lun = 4;

            // Whether to force the read-only setting in VolumeMounts. Defaults to false.
            bool   read_only = 5;

            // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
            string target_portal = 6;
          }
          repeated Iscsi iscsi = 17;
          message Local {

            // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#local
            string path = 1;
          }
          repeated Local local = 18;
          message Nfs {

            // Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
            string path = 1;

            // Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
            bool   read_only = 2;

            // Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
            string server = 3;
          }
          repeated Nfs nfs = 19;
          message PersistentVolumeClaim {

            // ClaimName is the name of a PersistentVolumeClaim in the same 
            string claim_name = 1;

            // Will force the ReadOnly setting in VolumeMounts.
            bool   read_only = 2;
          }
          repeated PersistentVolumeClaim persistent_volume_claim = 20;
          message PhotonPersistentDisk {

            // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            string fs_type = 1;

            // ID that identifies Photon Controller persistent disk
            string pd_id = 2;
          }
          repeated PhotonPersistentDisk photon_persistent_disk = 21;
          message Quobyte {

            // Group to map volume access to Default is no group
            string group = 1;

            // Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
            bool   read_only = 2;

            // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
            string registry = 3;

            // User to map volume access to Defaults to serivceaccount user
            string user = 4;

            // Volume is a string that references an already created Quobyte volume by name.
            string volume = 5;
          }
          repeated Quobyte quobyte = 22;
          message Rbd {

            // A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
            repeated string ceph_monitors = 1;

            // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd
            string fs_type = 2;

            // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
            string keyring = 3;

            // The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
            string rados_user = 4;

            // The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
            string rbd_image = 5;

            // The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.
            string rbd_pool = 6;

            // Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
            bool   read_only = 7;
            message SecretRef {

              // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
              string name = 1;
            }
            repeated SecretRef secret_ref = 8;
          }
          repeated Rbd rbd = 23;
          message Secret {

            // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
            string default_mode = 1;

            // Optional: Specify whether the Secret or it's keys must be defined.
            bool   optional = 2;

            // Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
            string secret_name = 3;
            message Items {

              // The key to project.
              string key = 1;

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 2;

              // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
              string path = 3;
            }
            repeated Items items = 4;
          }
          repeated Secret secret = 24;
          message VsphereVolume {

            // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            string fs_type = 1;

            // Path that identifies vSphere volume vmdk
            string volume_path = 2;
          }
          repeated VsphereVolume vsphere_volume = 25;
        }
        repeated Volume volume = 24;
      }
      repeated Spec spec = 2;
    }
    repeated Template template = 8;
  }
  repeated Spec spec = 3;
  message Timeouts {
    string delete = 1;
  }
  Timeouts timeouts = 4;
}