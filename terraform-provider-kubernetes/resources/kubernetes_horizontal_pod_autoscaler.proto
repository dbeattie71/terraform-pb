syntax="proto3";

package kubernetes;

message KubernetesHorizontalPodAutoscaler {
  string id = 1;
  message Metadata {

    // An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2;

    // A sequence number representing a specific generation of the desired state.
    int64  generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7;

    // A URL representing this horizontal pod autoscaler.
    string self_link = 8;

    // The unique in time and space value for this horizontal pod autoscaler. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 9;
  }
  repeated Metadata metadata = 2;
  message Spec {

    // Upper limit for the number of pods that can be set by the autoscaler.
    int64  max_replicas = 1;

    // Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
    int64  min_replicas = 2;

    // Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
    int64  target_cpu_utilization_percentage = 3;
    message Metric {

      // type is the type of metric source. It should be one of "Object", "Pods", "External" or "Resource", each mapping to a matching field in the object.
      string type = 1;
      message External {
        message Metric {

          // name is the name of the given metric
          string name = 1;
          message Selector {

            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1;
            message MatchExpressions {

              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
            repeated MatchExpressions match_expressions = 2;
          }
          repeated Selector selector = 2;
        }
        repeated Metric metric = 1;
        message Target {

          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64  average_utilization = 1;

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2;

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
        repeated Target target = 2;
      }
      repeated External external = 2;
      message Object {
        message DescribedObject {

          // API version of the referent
          string api_version = 1;

          // Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          string kind = 2;

          // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 3;
        }
        repeated DescribedObject described_object = 1;
        message Metric {

          // name is the name of the given metric
          string name = 1;
          message Selector {

            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1;
            message MatchExpressions {

              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
            repeated MatchExpressions match_expressions = 2;
          }
          repeated Selector selector = 2;
        }
        repeated Metric metric = 2;
        message Target {

          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64  average_utilization = 1;

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2;

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
        repeated Target target = 3;
      }
      repeated Object object = 3;
      message Pods {
        message Metric {

          // name is the name of the given metric
          string name = 1;
          message Selector {

            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1;
            message MatchExpressions {

              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
            repeated MatchExpressions match_expressions = 2;
          }
          repeated Selector selector = 2;
        }
        repeated Metric metric = 1;
        message Target {

          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64  average_utilization = 1;

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2;

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
        repeated Target target = 2;
      }
      repeated Pods pods = 4;
      message Resource {

        // name is the name of the resource in question.
        string name = 1;
        message Target {

          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64  average_utilization = 1;

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2;

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
        repeated Target target = 2;
      }
      repeated Resource resource = 5;
    }
    repeated Metric metric = 4;
    message ScaleTargetRef {

      // API version of the referent
      string api_version = 1;

      // Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
      string kind = 2;

      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 3;
    }
    repeated ScaleTargetRef scale_target_ref = 5;
  }
  repeated Spec spec = 3;
}