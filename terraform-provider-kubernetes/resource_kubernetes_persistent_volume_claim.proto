syntax "proto3";

package kubernetes;

message KubernetesPersistentVolumeClaim {
  id = 1;

  // Whether to wait for the claim to reach `Bound` state (to find volume in which to claim the space)
  wait_until_bound = 2;
  message Metadata {

    // An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    generate_name = 2;

    // A sequence number representing a specific generation of the desired state.
    generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    labels = 4;

    // Name of the persistent volume claim, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    name = 5;

    // Namespace defines the space within which name of the persistent volume claim must be unique.
    namespace = 6;

    // An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    resource_version = 7;

    // A URL representing this persistent volume claim.
    self_link = 8;

    // The unique in time and space value for this persistent volume claim. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    uid = 9;
  }
  metadata = 3;
  message Spec {

    // A set of the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
    access_modes = 1;

    // Name of the storage class requested by the claim
    storage_class_name = 2;

    // The binding reference to the PersistentVolume backing this claim.
    volume_name = 3;
    message Resources {

      // Map describing the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
      limits = 1;

      // Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/
      requests = 2;
    }
    resources = 4;
    message Selector {

      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      match_labels = 1;
      message MatchExpressions {

        // The label key that the selector applies to.
        key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        values = 3;
      }
      match_expressions = 2;
    }
    selector = 5;
  }
  spec = 4;
  message Timeouts {
    create = 1;
  }
  timeouts = 5;
}