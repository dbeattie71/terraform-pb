syntax "proto3";

package kubernetes;

message KubernetesClusterRoleBinding {
  id = 1;
  message Metadata {

    // An unstructured key value map stored with the clusterRoleBinding that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the clusterRoleBinding. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    labels = 3;

    // Name of the clusterRoleBinding, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    name = 4;

    // An opaque value that represents the internal version of this clusterRoleBinding that can be used by clients to determine when clusterRoleBinding has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    resource_version = 5;

    // A URL representing this clusterRoleBinding.
    self_link = 6;

    // The unique in time and space value for this clusterRoleBinding. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    uid = 7;
  }
  metadata = 2;
  message RoleRef {

    // The API group of the user. The only value possible at the moment is `rbac.authorization.k8s.io`.
    api_group = 1;

    // The kind of resource.
    kind = 2;

    // The name of the User to bind to.
    name = 3;
  }
  role_ref = 3;
  message Subject {

    // The API group of the subject resource.
    api_group = 1;

    // The kind of resource.
    kind = 2;

    // The name of the resource to bind to.
    name = 3;

    // The Namespace of the subject resource.
    namespace = 4;
  }
  subject = 4;
}