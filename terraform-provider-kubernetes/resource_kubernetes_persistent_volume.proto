syntax "proto3";

package kubernetes;

message KubernetesPersistentVolume {
  id = 1;
  message Metadata {

    // An unstructured key value map stored with the persistent volume that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    labels = 3;

    // Name of the persistent volume, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    name = 4;

    // An opaque value that represents the internal version of this persistent volume that can be used by clients to determine when persistent volume has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    resource_version = 5;

    // A URL representing this persistent volume.
    self_link = 6;

    // The unique in time and space value for this persistent volume. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    uid = 7;
  }
  metadata = 2;
  message Spec {

    // Contains all ways the volume can be mounted. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes
    access_modes = 1;

    // A description of the persistent volume's resources and capacity. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#capacity
    capacity = 2;

    // A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid.
    mount_options = 3;

    // What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#recycling-policy
    persistent_volume_reclaim_policy = 4;

    // A description of the persistent volume's class. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class
    storage_class_name = 5;
    message NodeAffinity {
      message Required {
        message NodeSelectorTerm {
          message MatchExpressions {

            // The label key that the selector applies to.
            key = 1;

            // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
            operator = 2;

            // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
            values = 3;
          }
          match_expressions = 1;
          message MatchFields {

            // The label key that the selector applies to.
            key = 1;

            // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
            operator = 2;

            // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
            values = 3;
          }
          match_fields = 2;
        }
        node_selector_term = 1;
      }
      required = 1;
    }
    node_affinity = 6;
    message PersistentVolumeSource {
      message AwsElasticBlockStore {

        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        fs_type = 1;

        // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        partition = 2;

        // Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        read_only = 3;

        // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        volume_id = 4;
      }
      aws_elastic_block_store = 1;
      message AzureDisk {

        // Host Caching mode: None, Read Only, Read Write.
        caching_mode = 1;

        // The URI the data disk in the blob storage
        data_disk_uri = 2;

        // The Name of the data disk in the blob storage
        disk_name = 3;

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        fs_type = 4;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        read_only = 5;
      }
      azure_disk = 2;
      message AzureFile {

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        read_only = 1;

        // The name of secret that contains Azure Storage Account Name and Key
        secret_name = 2;

        // Share Name
        share_name = 3;
      }
      azure_file = 3;
      message CephFs {

        // Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        monitors = 1;

        // Used as the mounted root, rather than the full Ceph tree, default is /
        path = 2;

        // Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        read_only = 3;

        // The path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        secret_file = 4;

        // User is the rados user name, default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        user = 5;
        message SecretRef {

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          name = 1;
        }
        secret_ref = 6;
      }
      ceph_fs = 4;
      message Cinder {

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        fs_type = 1;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        read_only = 2;

        // Volume ID used to identify the volume in Cinder. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        volume_id = 3;
      }
      cinder = 5;
      message Fc {

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        fs_type = 1;

        // FC target lun number
        lun = 2;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        read_only = 3;

        // FC target worldwide names (WWNs)
        target_ww_ns = 4;
      }
      fc = 6;
      message FlexVolume {

        // Driver is the name of the driver to use for this volume.
        driver = 1;

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        fs_type = 2;

        // Extra command options if any.
        options = 3;

        // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        read_only = 4;
        message SecretRef {

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          name = 1;
        }
        secret_ref = 5;
      }
      flex_volume = 7;
      message Flocker {

        // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        dataset_name = 1;

        // UUID of the dataset. This is unique identifier of a Flocker dataset
        dataset_uuid = 2;
      }
      flocker = 8;
      message GcePersistentDisk {

        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        fs_type = 1;

        // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        partition = 2;

        // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        pd_name = 3;

        // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        read_only = 4;
      }
      gce_persistent_disk = 9;
      message Glusterfs {

        // The endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        endpoints_name = 1;

        // The Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        path = 2;

        // Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        read_only = 3;
      }
      glusterfs = 10;
      message HostPath {

        // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
        path = 1;

        // Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        type = 2;
      }
      host_path = 11;
      message Iscsi {

        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi
        fs_type = 1;

        // Target iSCSI Qualified Name.
        iqn = 2;

        // iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
        iscsi_interface = 3;

        // iSCSI target lun number.
        lun = 4;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false.
        read_only = 5;

        // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        target_portal = 6;
      }
      iscsi = 12;
      message Local {

        // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#local
        path = 1;
      }
      local = 13;
      message Nfs {

        // Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        path = 1;

        // Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        read_only = 2;

        // Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        server = 3;
      }
      nfs = 14;
      message PhotonPersistentDisk {

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        fs_type = 1;

        // ID that identifies Photon Controller persistent disk
        pd_id = 2;
      }
      photon_persistent_disk = 15;
      message Quobyte {

        // Group to map volume access to Default is no group
        group = 1;

        // Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        read_only = 2;

        // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        registry = 3;

        // User to map volume access to Defaults to serivceaccount user
        user = 4;

        // Volume is a string that references an already created Quobyte volume by name.
        volume = 5;
      }
      quobyte = 16;
      message Rbd {

        // A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        ceph_monitors = 1;

        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd
        fs_type = 2;

        // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        keyring = 3;

        // The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        rados_user = 4;

        // The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        rbd_image = 5;

        // The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.
        rbd_pool = 6;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        read_only = 7;
        message SecretRef {

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          name = 1;
        }
        secret_ref = 8;
      }
      rbd = 17;
      message VsphereVolume {

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        fs_type = 1;

        // Path that identifies vSphere volume vmdk
        volume_path = 2;
      }
      vsphere_volume = 18;
    }
    persistent_volume_source = 7;
  }
  spec = 3;
  message Timeouts {
    create = 1;
  }
  timeouts = 4;
}