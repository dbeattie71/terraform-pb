syntax="proto3";

package kubernetes;

message KubernetesStorageClass {

  // Indicates whether the storage class allow volume expand
  bool   allow_volume_expansion = 1;
  string id = 2;

  // Persistent Volumes that are dynamically created by a storage class will have the mount options specified
  repeated string mount_options = 3;

  // The parameters for the provisioner that should create volumes of this storage class
  map<string, string> parameters = 4;

  // Indicates the type of the reclaim policy
  string reclaim_policy = 5;

  // Indicates the type of the provisioner
  string storage_provisioner = 6;
  message Metadata {

    // An unstructured key value map stored with the storage class that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    int64  generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the storage class. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 3;

    // Name of the storage class, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 4;

    // An opaque value that represents the internal version of this storage class that can be used by clients to determine when storage class has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 5;

    // A URL representing this storage class.
    string self_link = 6;

    // The unique in time and space value for this storage class. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }
  repeated Metadata metadata = 7;
}