syntax="proto3";

package kubernetes;

message KubernetesSecret {

  // A map of the secret data.
  map<string, string> data = 1;
  string id = 2;

  // Type of secret
  string type = 3;
  message Metadata {

    // An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    int64  generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 3;

    // Name of the secret, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 4;

    // Namespace defines the space within which name of the secret must be unique.
    string namespace = 5;

    // An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6;

    // A URL representing this secret.
    string self_link = 7;

    // The unique in time and space value for this secret. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }
  repeated Metadata metadata = 4;
}