syntax "proto3";

package kubernetes;

message KubernetesIngress {
  id = 1;
  load_balancer_ingress = 2;
  message Metadata {

    // An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    generate_name = 2;

    // A sequence number representing a specific generation of the desired state.
    generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    labels = 4;

    // Name of the ingress, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    name = 5;

    // Namespace defines the space within which name of the ingress must be unique.
    namespace = 6;

    // An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    resource_version = 7;

    // A URL representing this ingress.
    self_link = 8;

    // The unique in time and space value for this ingress. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    uid = 9;
  }
  metadata = 3;
  message Spec {
    message Backend {

      // Specifies the name of the referenced service.
      service_name = 1;

      // Specifies the port of the referenced service.
      service_port = 2;
    }
    backend = 1;
    message Rule {

      // Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The : delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
      host = 1;
      message Http {
        message Path {

          // path.regex is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.
          path = 1;
          message Backend {

            // Specifies the name of the referenced service.
            service_name = 1;

            // Specifies the port of the referenced service.
            service_port = 2;
          }
          backend = 2;
        }
        path = 1;
      }
      http = 2;
    }
    rule = 2;
    message Tls {

      // Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
      hosts = 1;

      // SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
      secret_name = 2;
    }
    tls = 3;
  }
  spec = 4;
}