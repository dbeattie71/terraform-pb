syntax "proto3";

package kubernetes;

message KubernetesService {
  id = 1;
  load_balancer_ingress = 2;

  // Spec defines the behavior of a service. https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  spec = 3;
  message Metadata {

    // An unstructured key value map stored with the service that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    labels = 3;

    // Name of the service, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    name = 4;

    // Namespace defines the space within which name of the service must be unique.
    namespace = 5;

    // An opaque value that represents the internal version of this service that can be used by clients to determine when service has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    resource_version = 6;

    // A URL representing this service.
    self_link = 7;

    // The unique in time and space value for this service. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    uid = 8;
  }
  metadata = 4;
}