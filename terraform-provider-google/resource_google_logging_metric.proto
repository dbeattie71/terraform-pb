syntax "proto3";

package google;

message GoogleLoggingMetric {

  // A description of this metric, which is used in documentation. The maximum length of the
description is 8000 characters.
  description = 1;

  // An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which
is used to match log entries.
  filter = 2;
  id = 3;

  // A map from a label key string to an extractor expression which is used to extract data from a log
entry field and assign as the label value. Each label key specified in the LabelDescriptor must
have an associated extractor expression in this map. The syntax of the extractor expression is
the same as for the valueExtractor field.
  label_extractors = 4;

  // The client-assigned metric identifier. Examples - "error_count", "nginx/requests".
Metric identifiers are limited to 100 characters and can include only the following
characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash
character (/) denotes a hierarchy of name pieces, and it cannot be the first character
of the name.
  name = 5;
  project = 6;

  // A valueExtractor is required when using a distribution logs-based metric to extract the values to
record from a log entry. Two functions are supported for value extraction - EXTRACT(field) or
REGEXP_EXTRACT(field, regex). The argument are 1. field - The name of the log entry field from which
the value is to be extracted. 2. regex - A regular expression using the Google RE2 syntax
(https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified
log entry field. The value of the field is converted to a string before applying the regex. It is an
error to specify a regex that does not include exactly one capture group.
  value_extractor = 7;
  message BucketOptions {
    message ExplicitBuckets {

      // The values must be monotonically increasing.
      bounds = 1;
    }
    explicit_buckets = 1;
    message ExponentialBuckets {

      // Must be greater than 1.
      growth_factor = 1;

      // Must be greater than 0.
      num_finite_buckets = 2;

      // Must be greater than 0.
      scale = 3;
    }
    exponential_buckets = 2;
    message LinearBuckets {

      // Must be greater than 0.
      num_finite_buckets = 1;

      // Lower bound of the first bucket.
      offset = 2;

      // Must be greater than 0.
      width = 3;
    }
    linear_buckets = 3;
  }
  bucket_options = 8;
  message MetricDescriptor {

    // A concise name for the metric, which can be displayed in user interfaces. Use sentence case 
without an ending period, for example "Request count". This field is optional but it is 
recommended to be set for any metrics associated with user-visible concepts, such as Quota.
    display_name = 1;

    // Whether the metric records instantaneous values, changes to a value, etc.
Some combinations of metricKind and valueType might not be supported.
For counter metrics, set this to DELTA.
    metric_kind = 2;

    // The unit in which the metric value is reported. It is only applicable if the valueType is
'INT64', 'DOUBLE', or 'DISTRIBUTION'. The supported units are a subset of
[The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
    unit = 3;

    // Whether the measurement is an integer, a floating-point number, etc.
Some combinations of metricKind and valueType might not be supported.
For counter metrics, set this to INT64.
    value_type = 4;
    message Labels {

      // A human-readable description for the label.
      description = 1;

      // The label key.
      key = 2;

      // The type of data that can be assigned to the label.
      value_type = 3;
    }
    labels = 5;
  }
  metric_descriptor = 9;
  message Timeouts {
    create = 1;
    delete = 2;
    update = 3;
  }
  timeouts = 10;
}