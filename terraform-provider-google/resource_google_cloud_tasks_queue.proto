syntax "proto3";

package google;

message GoogleCloudTasksQueue {
  id = 1;

  // The location of the queue
  location = 2;

  // The queue name.
  name = 3;
  project = 4;
  message AppEngineRoutingOverride {

    // The host that the task is sent to.
    host = 1;

    // App instance.

By default, the task is sent to an instance which is available when the task is attempted.
    instance = 2;

    // App service.

By default, the task is sent to the service which is the default service when the task is attempted.
    service = 3;

    // App version.

By default, the task is sent to the version which is the default version when the task is attempted.
    version = 4;
  }
  app_engine_routing_override = 5;
  message RateLimits {

    // The max burst size.

Max burst size limits how fast tasks in queue are processed when many tasks are
in the queue and the rate is high. This field allows the queue to have a high
rate so processing starts shortly after a task is enqueued, but still limits
resource usage when many tasks are enqueued in a short period of time.
    max_burst_size = 1;

    // The maximum number of concurrent tasks that Cloud Tasks allows to
be dispatched for this queue. After this threshold has been
reached, Cloud Tasks stops dispatching tasks until the number of
concurrent requests decreases.
    max_concurrent_dispatches = 2;

    // The maximum rate at which tasks are dispatched from this queue.

If unspecified when the queue is created, Cloud Tasks will pick the default.
    max_dispatches_per_second = 3;
  }
  rate_limits = 6;
  message RetryConfig {

    // Number of attempts per task.

Cloud Tasks will attempt the task maxAttempts times (that is, if
the first attempt fails, then there will be maxAttempts - 1
retries). Must be >= -1.

If unspecified when the queue is created, Cloud Tasks will pick
the default.

-1 indicates unlimited attempts.
    max_attempts = 1;

    // A task will be scheduled for retry between minBackoff and
maxBackoff duration after it fails, if the queue's RetryConfig
specifies that the task should be retried.
    max_backoff = 2;

    // The time between retries will double maxDoublings times.

A task's retry interval starts at minBackoff, then doubles maxDoublings times,
then increases linearly, and finally retries retries at intervals of maxBackoff
up to maxAttempts times.
    max_doublings = 3;

    // If positive, maxRetryDuration specifies the time limit for
retrying a failed task, measured from when the task was first
attempted. Once maxRetryDuration time has passed and the task has
been attempted maxAttempts times, no further attempts will be
made and the task will be deleted.

If zero, then the task age is unlimited.
    max_retry_duration = 4;

    // A task will be scheduled for retry between minBackoff and
maxBackoff duration after it fails, if the queue's RetryConfig
specifies that the task should be retried.
    min_backoff = 5;
  }
  retry_config = 7;
  message Timeouts {
    create = 1;
    delete = 2;
    update = 3;
  }
  timeouts = 8;
}