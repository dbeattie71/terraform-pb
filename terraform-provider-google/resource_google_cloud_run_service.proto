syntax "proto3";

package google;

message GoogleCloudRunService {
  autogenerate_revision_name = 1;
  id = 2;

  // The location of the cloud run instance. eg us-central1
  location = 3;

  // Name must be unique within a namespace, within a Cloud Run region.
Is required when creating resources. Name is primarily intended
for creation idempotence and configuration definition. Cannot be updated.
More info: http://kubernetes.io/docs/user-guide/identifiers#names
  name = 4;
  project = 5;

  // The current status of the Service.
  status = 6;
  message Metadata {

    // Annotations is a key value map stored with a resource that
may be set by external tools to store and retrieve arbitrary metadata. More
info: http://kubernetes.io/docs/user-guide/annotations
    annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    generation = 2;

    // Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and routes.
More info: http://kubernetes.io/docs/user-guide/labels
    labels = 3;

    // In Cloud Run the namespace must be equal to either the
project ID or project number.
    namespace = 4;

    // An opaque value that represents the internal version of this object that
can be used by clients to determine when objects have changed. May be used
for optimistic concurrency, change detection, and the watch operation on a
resource or set of resources. They may only be valid for a
particular resource or set of resources.

More info:
https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    resource_version = 5;

    // SelfLink is a URL representing this object.
    self_link = 6;

    // UID is a unique id generated by the server on successful creation of a resource and is not
allowed to change on PUT operations.

More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    uid = 7;
  }
  metadata = 7;
  message Template {
    message Metadata {

      // Annotations is a key value map stored with a resource that
may be set by external tools to store and retrieve arbitrary metadata. More
info: http://kubernetes.io/docs/user-guide/annotations
      annotations = 1;

      // A sequence number representing a specific generation of the desired state.
      generation = 2;

      // Map of string keys and values that can be used to organize and categorize
(scope and select) objects. May match selectors of replication controllers
and routes.
More info: http://kubernetes.io/docs/user-guide/labels
      labels = 3;

      // Name must be unique within a namespace, within a Cloud Run region.
Is required when creating resources. Name is primarily intended
for creation idempotence and configuration definition. Cannot be updated.
More info: http://kubernetes.io/docs/user-guide/identifiers#names
      name = 4;

      // In Cloud Run the namespace must be equal to either the
project ID or project number. It will default to the resource's project.
      namespace = 5;

      // An opaque value that represents the internal version of this object that
can be used by clients to determine when objects have changed. May be used
for optimistic concurrency, change detection, and the watch operation on a
resource or set of resources. They may only be valid for a
particular resource or set of resources.

More info:
https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
      resource_version = 6;

      // SelfLink is a URL representing this object.
      self_link = 7;

      // UID is a unique id generated by the server on successful creation of a resource and is not
allowed to change on PUT operations.

More info: http://kubernetes.io/docs/user-guide/identifiers#uids
      uid = 8;
    }
    metadata = 1;
    message Spec {

      // ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
requests per container of the Revision. Values are:
- '0' thread-safe, the system should manage the max concurrency. This is
    the default value.
- '1' not-thread-safe. Single concurrency
- '2-N' thread-safe, max concurrency of N
      container_concurrency = 1;

      // Email address of the IAM service account associated with the revision of the
service. The service account represents the identity of the running revision,
and determines what permissions the revision has. If not provided, the revision
will use the project's default service account.
      service_account_name = 2;

      // ServingState holds a value describing the state the resources
are in for this Revision.
It is expected
that the system will manipulate this based on routability and load.
      serving_state = 3;
      message Containers {

        // Arguments to the entrypoint.
The docker image's CMD is used if this is not provided.
Variable references $(VAR_NAME) are expanded using the container's
environment. If a variable cannot be resolved, the reference in the input
string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
regardless of whether the variable exists or not.
More info:
https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        args = 1;

        // Entrypoint array. Not executed within a shell.
The docker image's ENTRYPOINT is used if this is not provided.
Variable references $(VAR_NAME) are expanded using the container's
environment. If a variable cannot be resolved, the reference in the input
string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
regardless of whether the variable exists or not.
More info:
https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        command = 2;

        // Docker image name. This is most often a reference to a container located
in the container registry, such as gcr.io/cloudrun/hello
More info: https://kubernetes.io/docs/concepts/containers/images
        image = 3;

        // Container's working directory.
If not specified, the container runtime's default will be used, which
might be configured in the container image.
        working_dir = 4;
        message Env {

          // Name of the environment variable.
          name = 1;

          // Variable references $(VAR_NAME) are expanded
using the previous defined environment variables in the container and
any route environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. The $(VAR_NAME)
syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".
          value = 2;
        }
        env = 5;
        message EnvFrom {

          // An optional identifier to prepend to each key in the ConfigMap.
          prefix = 1;
          message ConfigMapRef {

            // Specify whether the ConfigMap must be defined
            optional = 1;
            message LocalObjectReference {

              // Name of the referent.
More info:
https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
              name = 1;
            }
            local_object_reference = 2;
          }
          config_map_ref = 2;
          message SecretRef {

            // Specify whether the Secret must be defined
            optional = 1;
            message LocalObjectReference {

              // Name of the referent.
More info:
https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
              name = 1;
            }
            local_object_reference = 2;
          }
          secret_ref = 3;
        }
        env_from = 6;
        message Resources {

          // Limits describes the maximum amount of compute resources allowed.
The values of the map is string form of the 'quantity' k8s type:
https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
          limits = 1;

          // Requests describes the minimum amount of compute resources required.
If Requests is omitted for a container, it defaults to Limits if that is
explicitly specified, otherwise to an implementation-defined value.
The values of the map is string form of the 'quantity' k8s type:
https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
          requests = 2;
        }
        resources = 7;
      }
      containers = 4;
    }
    spec = 2;
  }
  template = 8;
  message Timeouts {
    create = 1;
    delete = 2;
    update = 3;
  }
  timeouts = 9;
  message Traffic {

    // LatestRevision may be optionally provided to indicate that the latest ready
Revision of the Configuration should be used for this traffic target. When
provided LatestRevision must be true if RevisionName is empty; it must be
false when RevisionName is non-empty.
    latest_revision = 1;

    // Percent specifies percent of the traffic to this Revision or Configuration.
    percent = 2;

    // RevisionName of a specific revision to which to send this portion of traffic.
    revision_name = 3;
  }
  traffic = 10;
}