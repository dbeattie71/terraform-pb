syntax="proto3";

package google;

message GoogleCloudSchedulerJob {

  // The deadline for job attempts. If the request handler does not respond by this deadline then the request is
  // cancelled and the attempt is marked as a DEADLINE_EXCEEDED failure. The failed attempt can be viewed in
  // execution logs. Cloud Scheduler will retry the job according to the RetryConfig.
  // The allowed duration for this deadline is:
  // * For HTTP targets, between 15 seconds and 30 minutes.
  // * For App Engine HTTP targets, between 15 seconds and 24 hours.
  // A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
  string attempt_deadline = 1;

  // A human-readable description for the job. 
  // This string must not contain more than 500 characters.
  string description = 2;
  string id = 3;

  // The name of the job.
  string name = 4;
  string project = 5;

  // Region where the scheduler job resides
  string region = 6;

  // Describes the schedule on which the job will be executed.
  string schedule = 7;

  // Specifies the time zone to be used in interpreting schedule.
  // The value of this field must be a time zone name from the tz database.
  string time_zone = 8;
  message AppEngineHttpTarget {

    // HTTP request body. 
    // A request body is allowed only if the HTTP method is POST or PUT. 
    // It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
    string body = 1;

    // HTTP request headers.
    // This map contains the header field names and values. 
    // Headers can be set when the job is created.
    map<string, string> headers = 2;

    // Which HTTP method to use for the request.
    string http_method = 3;

    // The relative URI.
    // The relative URL must begin with "/" and must be a valid HTTP relative URL. 
    // It can contain a path, query string arguments, and \# fragments. 
    // If the relative URL is empty, then the root path "/" will be used. 
    // No spaces are allowed, and the maximum length allowed is 2083 characters
    string relative_uri = 4;
    message AppEngineRouting {

      // App instance.
      // By default, the job is sent to an instance which is available when the job is attempted.
      string instance = 1;

      // App service.
      // By default, the job is sent to the service which is the default service when the job is attempted.
      string service = 2;

      // App version.
      // By default, the job is sent to the version which is the default version when the job is attempted.
      string version = 3;
    }
    repeated AppEngineRouting app_engine_routing = 5;
  }
  repeated AppEngineHttpTarget app_engine_http_target = 9;
  message HttpTarget {

    // HTTP request body. 
    // A request body is allowed only if the HTTP method is POST, PUT, or PATCH. 
    // It is an error to set body on a job with an incompatible HttpMethod.
    string body = 1;

    // This map contains the header field names and values. 
    // Repeated headers are not supported, but a header value can contain commas.
    map<string, string> headers = 2;

    // Which HTTP method to use for the request.
    string http_method = 3;

    // The full URI path that the request will be sent to.
    string uri = 4;
    message OauthToken {

      // OAuth scope to be used for generating OAuth access token. If not specified,
      // "https://www.googleapis.com/auth/cloud-platform" will be used.
      string scope = 1;

      // Service account email to be used for generating OAuth token.
      // The service account must be within the same project as the job.
      string service_account_email = 2;
    }
    repeated OauthToken oauth_token = 5;
    message OidcToken {

      // Audience to be used when generating OIDC token. If not specified,
      // the URI specified in target will be used.
      string audience = 1;

      // Service account email to be used for generating OAuth token.
      // The service account must be within the same project as the job.
      string service_account_email = 2;
    }
    repeated OidcToken oidc_token = 6;
  }
  repeated HttpTarget http_target = 10;
  message PubsubTarget {

    // Attributes for PubsubMessage.
    // Pubsub message must contain either non-empty data, or at least one attribute.
    map<string, string> attributes = 1;

    // The message payload for PubsubMessage.
    // Pubsub message must contain either non-empty data, or at least one attribute.
    string data = 2;

    // The full resource name for the Cloud Pub/Sub topic to which
    // messages will be published when a job is delivered. ~>**NOTE**:
    // The topic name must be in the same format as required by PubSub's
    // PublishRequest.name, e.g. 'projects/my-project/topics/my-topic'.
    string topic_name = 3;
  }
  repeated PubsubTarget pubsub_target = 11;
  message RetryConfig {

    // The maximum amount of time to wait before retrying a job after it fails.
    // A duration in seconds with up to nine fractional digits, terminated by 's'.
    string max_backoff_duration = 1;

    // The time between retries will double maxDoublings times.
    // A job's retry interval starts at minBackoffDuration, 
    // then doubles maxDoublings times, then increases linearly, 
    // and finally retries retries at intervals of maxBackoffDuration up to retryCount times.
    int64  max_doublings = 2;

    // The time limit for retrying a failed job, measured from time when an execution was first attempted. 
    // If specified with retryCount, the job will be retried until both limits are reached.
    // A duration in seconds with up to nine fractional digits, terminated by 's'.
    string max_retry_duration = 3;

    // The minimum amount of time to wait before retrying a job after it fails.
    // A duration in seconds with up to nine fractional digits, terminated by 's'.
    string min_backoff_duration = 4;

    // The number of attempts that the system will make to run a 
    // job using the exponential backoff procedure described by maxDoublings.
    // Values greater than 5 and negative values are not allowed.
    int64  retry_count = 5;
  }
  repeated RetryConfig retry_config = 12;
  message Timeouts {
    string create = 1;
    string delete = 2;
  }
  Timeouts timeouts = 13;
}