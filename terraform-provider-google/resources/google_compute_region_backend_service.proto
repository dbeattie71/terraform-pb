syntax="proto3";

package google;

message GoogleComputeRegionBackendService {

  // Time for which instance will be drained (not accept new
  // connections, but still work to finish started).
  int64  connection_draining_timeout_sec = 1;

  // Creation timestamp in RFC3339 text format.
  string creation_timestamp = 2;

  // An optional description of this resource.
  string description = 3;

  // Fingerprint of this resource. A hash of the contents stored in this
  // object. This field is used in optimistic locking.
  string fingerprint = 4;

  // The set of URLs to HealthCheck resources for health checking
  // this RegionBackendService. Currently at most one health
  // check can be specified, and a health check is required.
  repeated string health_checks = 5;
  string id = 6;

  // Indicates what kind of load balancing this regional backend service
  // will be used for. A backend service created for one type of load
  // balancing cannot be used with the other(s). Must be 'INTERNAL' or
  // 'INTERNAL_MANAGED'. Defaults to 'INTERNAL'.
  string load_balancing_scheme = 7;

  // Name of the resource. Provided by the client when the resource is
  // created. The name must be 1-63 characters long, and comply with
  // RFC1035. Specifically, the name must be 1-63 characters long and match
  // the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
  // first character must be a lowercase letter, and all following
  // characters must be a dash, lowercase letter, or digit, except the last
  // character, which cannot be a dash.
  string name = 8;

  // The URL of the network to which this backend service belongs.
  // This field can only be specified when the load balancing scheme is set to INTERNAL.
  string network = 9;
  string project = 10;

  // The protocol this RegionBackendService uses to communicate with backends.
  // Possible values are HTTP, HTTPS, HTTP2, SSL, TCP, and UDP. The default is
  // HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
  // types and may result in errors if used with the GA API.
  string protocol = 11;

  // The Region in which the created backend service should reside.
  // If it is not provided, the provider region is used.
  string region = 12;
  string self_link = 13;

  // Type of session affinity to use. The default is NONE. Session affinity is
  // not applicable if the protocol is UDP.
  string session_affinity = 14;

  // How many seconds to wait for the backend before considering it a
  // failed request. Default is 30 seconds. Valid range is [1, 86400].
  int64  timeout_sec = 15;
  message Backend {

    // Specifies the balancing mode for this backend. Defaults to CONNECTION.
    string balancing_mode = 1;

    // A multiplier applied to the group's maximum servicing capacity
    // (based on UTILIZATION, RATE or CONNECTION).
    // 
    // ~>**NOTE**: This field cannot be set for
    // INTERNAL region backend services (default loadBalancingScheme),
    // but is required for non-INTERNAL backend service. The total
    // capacity_scaler for all backends must be non-zero.
    // 
    // A setting of 0 means the group is completely drained, offering
    // 0% of its available Capacity. Valid range is [0.0,1.0].
    int64  capacity_scaler = 2;

    // An optional description of this resource.
    // Provide this property when you create the resource.
    string description = 3;

    // The fully-qualified URL of an Instance Group or Network Endpoint
    // Group resource. In case of instance group this defines the list
    // of instances that serve traffic. Member virtual machine
    // instances from each instance group must live in the same zone as
    // the instance group itself. No two backends in a backend service
    // are allowed to use same Instance Group resource.
    // 
    // For Network Endpoint Groups this defines list of endpoints. All
    // endpoints of Network Endpoint Group must be hosted on instances
    // located in the same zone as the Network Endpoint Group.
    // 
    // Backend services cannot mix Instance Group and
    // Network Endpoint Group backends.
    // 
    // When the 'load_balancing_scheme' is INTERNAL, only instance groups
    // are supported.
    // 
    // Note that you must specify an Instance Group or Network Endpoint
    // Group resource using the fully-qualified URL, rather than a
    // partial URL.
    string group = 4;

    // The max number of simultaneous connections for the group. Can
    // be used with either CONNECTION or UTILIZATION balancing modes.
    // Cannot be set for INTERNAL backend services.
    // 
    // For CONNECTION mode, either maxConnections or one
    // of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    // as appropriate for group type, must be set.
    int64  max_connections = 5;

    // The max number of simultaneous connections that a single backend
    // network endpoint can handle. Cannot be set
    // for INTERNAL backend services.
    // 
    // This is used to calculate the capacity of the group. Can be
    // used in either CONNECTION or UTILIZATION balancing modes. For
    // CONNECTION mode, either maxConnections or
    // maxConnectionsPerEndpoint must be set.
    int64  max_connections_per_endpoint = 6;

    // The max number of simultaneous connections that a single
    // backend instance can handle. Cannot be set for INTERNAL backend
    // services.
    // 
    // This is used to calculate the capacity of the group.
    // Can be used in either CONNECTION or UTILIZATION balancing modes.
    // For CONNECTION mode, either maxConnections or
    // maxConnectionsPerInstance must be set.
    int64  max_connections_per_instance = 7;

    // The max requests per second (RPS) of the group. Cannot be set
    // for INTERNAL backend services.
    // 
    // Can be used with either RATE or UTILIZATION balancing modes,
    // but required if RATE mode. Either maxRate or one
    // of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    // group type, must be set.
    int64  max_rate = 8;

    // The max requests per second (RPS) that a single backend network
    // endpoint can handle. This is used to calculate the capacity of
    // the group. Can be used in either balancing mode. For RATE mode,
    // either maxRate or maxRatePerEndpoint must be set. Cannot be set
    // for INTERNAL backend services.
    int64  max_rate_per_endpoint = 9;

    // The max requests per second (RPS) that a single backend
    // instance can handle. This is used to calculate the capacity of
    // the group. Can be used in either balancing mode. For RATE mode,
    // either maxRate or maxRatePerInstance must be set. Cannot be set
    // for INTERNAL backend services.
    int64  max_rate_per_instance = 10;

    // Used when balancingMode is UTILIZATION. This ratio defines the
    // CPU utilization target for the group. Valid range is [0.0, 1.0].
    // Cannot be set for INTERNAL backend services.
    int64  max_utilization = 11;
  }
  repeated Backend backend = 16;
  message Timeouts {
    string create = 1;
    string delete = 2;
    string update = 3;
  }
  Timeouts timeouts = 17;
}