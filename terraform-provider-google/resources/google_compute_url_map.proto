syntax="proto3";

package google;

message GoogleComputeUrlMap {

  // Creation timestamp in RFC3339 text format.
  string creation_timestamp = 1;

  // The backend service or backend bucket to use when none of the given rules match.
  string default_service = 2;

  // An optional description of this resource. Provide this property when you create
  // the resource.
  string description = 3;

  // Fingerprint of this resource. A hash of the contents stored in this object. This
  // field is used in optimistic locking.
  string fingerprint = 4;
  string id = 5;

  // The unique identifier for the resource.
  int64  map_id = 6;

  // Name of the resource. Provided by the client when the resource is created. The
  // name must be 1-63 characters long, and comply with RFC1035. Specifically, the
  // name must be 1-63 characters long and match the regular expression
  // '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase
  // letter, and all following characters must be a dash, lowercase letter, or digit,
  // except the last character, which cannot be a dash.
  string name = 7;
  string project = 8;
  string self_link = 9;
  message HeaderAction {

    // A list of header names for headers that need to be removed from the request
    // prior to forwarding the request to the backendService.
    repeated string request_headers_to_remove = 1;

    // A list of header names for headers that need to be removed from the response
    // prior to sending the response back to the client.
    repeated string response_headers_to_remove = 2;
    message RequestHeadersToAdd {

      // The name of the header.
      string header_name = 1;

      // The value of the header to add.
      string header_value = 2;

      // If false, headerValue is appended to any values that already exist for the
      // header. If true, headerValue is set for the header, discarding any values that
      // were set for that header.
      bool   replace = 3;
    }
    repeated RequestHeadersToAdd request_headers_to_add = 3;
    message ResponseHeadersToAdd {

      // The name of the header.
      string header_name = 1;

      // The value of the header to add.
      string header_value = 2;

      // If false, headerValue is appended to any values that already exist for the
      // header. If true, headerValue is set for the header, discarding any values that
      // were set for that header.
      bool   replace = 3;
    }
    repeated ResponseHeadersToAdd response_headers_to_add = 4;
  }
  repeated HeaderAction header_action = 10;
  message HostRule {

    // An optional description of this resource. Provide this property when you create
    // the resource.
    string description = 1;

    // The list of host patterns to match. They must be valid hostnames, except * will
    // match any string of ([a-z0-9-.]*). In that case, * must be the first character
    // and must be followed in the pattern by either - or ..
    repeated string hosts = 2;

    // The name of the PathMatcher to use to match the path portion of the URL if the
    // hostRule matches the URL's host portion.
    string path_matcher = 3;
  }
  repeated HostRule host_rule = 11;
  message PathMatcher {

    // The backend service or backend bucket to use when none of the given paths match.
    string default_service = 1;

    // An optional description of this resource. Provide this property when you create
    // the resource.
    string description = 2;

    // The name to which this PathMatcher is referred by the HostRule.
    string name = 3;
    message HeaderAction {

      // A list of header names for headers that need to be removed from the request
      // prior to forwarding the request to the backendService.
      repeated string request_headers_to_remove = 1;

      // A list of header names for headers that need to be removed from the response
      // prior to sending the response back to the client.
      repeated string response_headers_to_remove = 2;
      message RequestHeadersToAdd {

        // The name of the header.
        string header_name = 1;

        // The value of the header to add.
        string header_value = 2;

        // If false, headerValue is appended to any values that already exist for the
        // header. If true, headerValue is set for the header, discarding any values that
        // were set for that header.
        bool   replace = 3;
      }
      repeated RequestHeadersToAdd request_headers_to_add = 3;
      message ResponseHeadersToAdd {

        // The name of the header.
        string header_name = 1;

        // The value of the header to add.
        string header_value = 2;

        // If false, headerValue is appended to any values that already exist for the
        // header. If true, headerValue is set for the header, discarding any values that
        // were set for that header.
        bool   replace = 3;
      }
      repeated ResponseHeadersToAdd response_headers_to_add = 4;
    }
    repeated HeaderAction header_action = 4;
    message PathRule {

      // The list of path patterns to match. Each must start with / and the only place a
      // * is allowed is at the end following a /. The string fed to the path matcher
      // does not include any text after the first ? or #, and those chars are not
      // allowed here.
      repeated string paths = 1;

      // The backend service or backend bucket to use if any of the given paths match.
      string service = 2;
      message RouteAction {
        message CorsPolicy {

          // In response to a preflight request, setting this to true indicates that the
          // actual request can include user credentials. This translates to the Access-
          // Control-Allow-Credentials header. Defaults to false.
          bool   allow_credentials = 1;

          // Specifies the content for the Access-Control-Allow-Headers header.
          repeated string allow_headers = 2;

          // Specifies the content for the Access-Control-Allow-Methods header.
          repeated string allow_methods = 3;

          // Specifies the regualar expression patterns that match allowed origins. For
          // regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
          // An origin is allowed if it matches either allow_origins or allow_origin_regex.
          repeated string allow_origin_regexes = 4;

          // Specifies the list of origins that will be allowed to do CORS requests. An
          // origin is allowed if it matches either allow_origins or allow_origin_regex.
          repeated string allow_origins = 5;

          // If true, specifies the CORS policy is disabled.
          bool   disabled = 6;

          // Specifies the content for the Access-Control-Expose-Headers header.
          repeated string expose_headers = 7;

          // Specifies how long the results of a preflight request can be cached. This
          // translates to the content for the Access-Control-Max-Age header.
          int64  max_age = 8;
        }
        repeated CorsPolicy cors_policy = 1;
        message FaultInjectionPolicy {
          message Abort {

            // The HTTP status code used to abort the request. The value must be between 200
            // and 599 inclusive.
            int64  http_status = 1;

            // The percentage of traffic (connections/operations/requests) which will be
            // aborted as part of fault injection. The value must be between 0.0 and 100.0
            // inclusive.
            int64  percentage = 2;
          }
          repeated Abort abort = 1;
          message Delay {

            // The percentage of traffic (connections/operations/requests) on which delay will
            // be introduced as part of fault injection. The value must be between 0.0 and
            // 100.0 inclusive.
            int64  percentage = 1;
            message FixedDelay {

              // Span of time that's a fraction of a second at nanosecond resolution. Durations
              // less than one second are represented with a 0 'seconds' field and a positive
              // 'nanos' field. Must be from 0 to 999,999,999 inclusive.
              int64  nanos = 1;

              // Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
              // inclusive.
              string seconds = 2;
            }
            repeated FixedDelay fixed_delay = 2;
          }
          repeated Delay delay = 2;
        }
        repeated FaultInjectionPolicy fault_injection_policy = 2;
        message RequestMirrorPolicy {

          // The BackendService resource being mirrored to.
          string backend_service = 1;
        }
        repeated RequestMirrorPolicy request_mirror_policy = 3;
        message RetryPolicy {

          // Specifies the allowed number retries. This number must be > 0.
          int64  num_retries = 1;

          // Specifies one or more conditions when this retry rule applies. Valid values are:
          // - 5xx: Loadbalancer will attempt a retry if the backend service responds with
          // any 5xx response code, or if the backend service does not respond at all,
          // example: disconnects, reset, read timeout, connection failure, and refused
          // streams.
          // - gateway-error: Similar to 5xx, but only applies to response codes
          // 502, 503 or 504.
          // - connect-failure: Loadbalancer will retry on failures
          // connecting to backend services, for example due to connection timeouts.
          // - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
          // Currently the only retriable error supported is 409.
          // - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
          // REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
          // - cancelled: Loadbalancer will retry if the gRPC status code in the response
          // header is set to cancelled
          // - deadline-exceeded: Loadbalancer will retry if the
          // gRPC status code in the response header is set to deadline-exceeded
          // - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
          // header is set to resource-exhausted
          // - unavailable: Loadbalancer will retry if
          // the gRPC status code in the response header is set to unavailable
          repeated string retry_conditions = 2;
          message PerTryTimeout {

            // Span of time that's a fraction of a second at nanosecond resolution. Durations
            // less than one second are represented with a 0 'seconds' field and a positive
            // 'nanos' field. Must be from 0 to 999,999,999 inclusive.
            int64  nanos = 1;

            // Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
            // inclusive.
            string seconds = 2;
          }
          repeated PerTryTimeout per_try_timeout = 3;
        }
        repeated RetryPolicy retry_policy = 4;
        message Timeout {

          // Span of time that's a fraction of a second at nanosecond resolution. Durations
          // less than one second are represented with a 0 'seconds' field and a positive
          // 'nanos' field. Must be from 0 to 999,999,999 inclusive.
          int64  nanos = 1;

          // Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
          // inclusive.
          string seconds = 2;
        }
        repeated Timeout timeout = 5;
        message UrlRewrite {

          // Prior to forwarding the request to the selected service, the request's host
          // header is replaced with contents of hostRewrite. The value must be between 1 and
          // 255 characters.
          string host_rewrite = 1;

          // Prior to forwarding the request to the selected backend service, the matching
          // portion of the request's path is replaced by pathPrefixRewrite. The value must
          // be between 1 and 1024 characters.
          string path_prefix_rewrite = 2;
        }
        repeated UrlRewrite url_rewrite = 6;
        message WeightedBackendServices {

          // The default BackendService resource. Before
          // forwarding the request to backendService, the loadbalancer applies any relevant
          // headerActions specified as part of this backendServiceWeight.
          string backend_service = 1;

          // Specifies the fraction of traffic sent to backendService, computed as weight /
          // (sum of all weightedBackendService weights in routeAction) . The selection of a
          // backend service is determined only for new traffic. Once a user's request has
          // been directed to a backendService, subsequent requests will be sent to the same
          // backendService as determined by the BackendService's session affinity policy.
          // The value must be between 0 and 1000
          int64  weight = 2;
          message HeaderAction {

            // A list of header names for headers that need to be removed from the request
            // prior to forwarding the request to the backendService.
            repeated string request_headers_to_remove = 1;

            // A list of header names for headers that need to be removed from the response
            // prior to sending the response back to the client.
            repeated string response_headers_to_remove = 2;
            message RequestHeadersToAdd {

              // The name of the header.
              string header_name = 1;

              // The value of the header to add.
              string header_value = 2;

              // If false, headerValue is appended to any values that already exist for the
              // header. If true, headerValue is set for the header, discarding any values that
              // were set for that header.
              bool   replace = 3;
            }
            repeated RequestHeadersToAdd request_headers_to_add = 3;
            message ResponseHeadersToAdd {

              // The name of the header.
              string header_name = 1;

              // The value of the header to add.
              string header_value = 2;

              // If false, headerValue is appended to any values that already exist for the
              // header. If true, headerValue is set for the header, discarding any values that
              // were set for that header.
              bool   replace = 3;
            }
            repeated ResponseHeadersToAdd response_headers_to_add = 4;
          }
          repeated HeaderAction header_action = 3;
        }
        repeated WeightedBackendServices weighted_backend_services = 7;
      }
      repeated RouteAction route_action = 3;
      message UrlRedirect {

        // The host that will be used in the redirect response instead of the one that was
        // supplied in the request. The value must be between 1 and 255 characters.
        string host_redirect = 1;

        // If set to true, the URL scheme in the redirected request is set to https. If set
        // to false, the URL scheme of the redirected request will remain the same as that
        // of the request. This must only be set for UrlMaps used in TargetHttpProxys.
        // Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
        bool   https_redirect = 2;

        // The path that will be used in the redirect response instead of the one that was
        // supplied in the request. Only one of pathRedirect or prefixRedirect must be
        // specified. The value must be between 1 and 1024 characters.
        string path_redirect = 3;

        // The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        // retaining the remaining portion of the URL before redirecting the request.
        string prefix_redirect = 4;

        // The HTTP Status code to use for this RedirectAction. Supported values are:
        // - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
        // - FOUND, which corresponds to 302.
        // - SEE_OTHER which corresponds to 303.
        // - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        // will be retained.
        // - PERMANENT_REDIRECT, which corresponds to 308. In this case,
        // the request method will be retained.
        string redirect_response_code = 5;

        // If set to true, any accompanying query portion of the original URL is removed
        // prior to redirecting the request. If set to false, the query portion of the
        // original URL is retained.
        bool   strip_query = 6;
      }
      repeated UrlRedirect url_redirect = 4;
    }
    repeated PathRule path_rule = 5;
    message RouteRules {

      // For routeRules within a given pathMatcher, priority determines the order
      // in which load balancer will interpret routeRules. RouteRules are evaluated
      // in order of priority, from the lowest to highest number. The priority of
      // a rule decreases as its number increases (1, 2, 3, N+1). The first rule
      // that matches the request is applied.
      // 
      // You cannot configure two or more routeRules with the same priority.
      // Priority for each rule must be set to a number between 0 and
      // 2147483647 inclusive.
      // 
      // Priority numbers can have gaps, which enable you to add or remove rules
      // in the future without affecting the rest of the rules. For example,
      // 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
      // you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
      // future without any impact on existing rules.
      int64  priority = 1;

      // The backend service resource to which traffic is
      // directed if this rule is matched. If routeAction is additionally specified,
      // advanced routing actions like URL Rewrites, etc. take effect prior to sending
      // the request to the backend. However, if service is specified, routeAction cannot
      // contain any weightedBackendService s. Conversely, if routeAction specifies any
      // weightedBackendServices, service must not be specified. Only one of urlRedirect,
      // service or routeAction.weightedBackendService must be set.
      string service = 2;
      message HeaderAction {

        // A list of header names for headers that need to be removed from the request
        // prior to forwarding the request to the backendService.
        repeated string request_headers_to_remove = 1;

        // A list of header names for headers that need to be removed from the response
        // prior to sending the response back to the client.
        repeated string response_headers_to_remove = 2;
        message RequestHeadersToAdd {

          // The name of the header.
          string header_name = 1;

          // The value of the header to add.
          string header_value = 2;

          // If false, headerValue is appended to any values that already exist for the
          // header. If true, headerValue is set for the header, discarding any values that
          // were set for that header.
          bool   replace = 3;
        }
        repeated RequestHeadersToAdd request_headers_to_add = 3;
        message ResponseHeadersToAdd {

          // The name of the header.
          string header_name = 1;

          // The value of the header to add.
          string header_value = 2;

          // If false, headerValue is appended to any values that already exist for the
          // header. If true, headerValue is set for the header, discarding any values that
          // were set for that header.
          bool   replace = 3;
        }
        repeated ResponseHeadersToAdd response_headers_to_add = 4;
      }
      repeated HeaderAction header_action = 3;
      message MatchRules {

        // For satifying the matchRule condition, the path of the request must exactly
        // match the value specified in fullPathMatch after removing any query parameters
        // and anchor that may be part of the original URL. FullPathMatch must be between 1
        // and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
        // be specified.
        string full_path_match = 1;

        // Specifies that prefixMatch and fullPathMatch matches are case sensitive.
        // Defaults to false.
        bool   ignore_case = 2;

        // For satifying the matchRule condition, the request's path must begin with the
        // specified prefixMatch. prefixMatch must begin with a /. The value must be
        // between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
        // regexMatch must be specified.
        string prefix_match = 3;

        // For satifying the matchRule condition, the path of the request must satisfy the
        // regular expression specified in regexMatch after removing any query parameters
        // and anchor supplied with the original URL. For regular expression grammar please
        // see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch,
        // fullPathMatch or regexMatch must be specified.
        string regex_match = 4;
        message HeaderMatches {

          // The value should exactly match contents of exactMatch. Only one of exactMatch,
          // prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
          string exact_match = 1;

          // The name of the HTTP header to match. For matching against the HTTP request's
          // authority, use a headerMatch with the header name ":authority". For matching a
          // request's method, use the headerName ":method".
          string header_name = 2;

          // If set to false, the headerMatch is considered a match if the match criteria
          // above are met. If set to true, the headerMatch is considered a match if the
          // match criteria above are NOT met. Defaults to false.
          bool   invert_match = 3;

          // The value of the header must start with the contents of prefixMatch. Only one of
          // exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
          // must be set.
          string prefix_match = 4;

          // A header with the contents of headerName must exist. The match takes place
          // whether or not the request's header has a value or not. Only one of exactMatch,
          // prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
          bool   present_match = 5;

          // The value of the header must match the regualar expression specified in
          // regexMatch. For regular expression grammar, please see:
          // en.cppreference.com/w/cpp/regex/ecmascript  For matching against a port
          // specified in the HTTP request, use a headerMatch with headerName set to PORT and
          // a regular expression that satisfies the RFC2616 Host header's port specifier.
          // Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or
          // rangeMatch must be set.
          string regex_match = 6;

          // The value of the header must end with the contents of suffixMatch. Only one of
          // exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
          // must be set.
          string suffix_match = 7;
          message RangeMatch {

            // The end of the range (exclusive).
            int64  range_end = 1;

            // The start of the range (inclusive).
            int64  range_start = 2;
          }
          repeated RangeMatch range_match = 8;
        }
        repeated HeaderMatches header_matches = 5;
        message MetadataFilters {

          // Specifies how individual filterLabel matches within the list of filterLabels
          // contribute towards the overall metadataFilter match. Supported values are:
          //   - MATCH_ANY: At least one of the filterLabels must have a matching label in the
          // provided metadata.
          //   - MATCH_ALL: All filterLabels must have matching labels in
          // the provided metadata.
          string filter_match_criteria = 1;
          message FilterLabels {

            // Name of metadata label. The name can have a maximum length of 1024 characters
            // and must be at least 1 character long.
            string name = 1;

            // The value of the label must match the specified value. value can have a maximum
            // length of 1024 characters.
            string value = 2;
          }
          repeated FilterLabels filter_labels = 2;
        }
        repeated MetadataFilters metadata_filters = 6;
        message QueryParameterMatches {

          // The queryParameterMatch matches if the value of the parameter exactly matches
          // the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
          // must be set.
          string exact_match = 1;

          // The name of the query parameter to match. The query parameter must exist in the
          // request, in the absence of which the request match fails.
          string name = 2;

          // Specifies that the queryParameterMatch matches if the request contains the query
          // parameter, irrespective of whether the parameter has a value or not. Only one of
          // presentMatch, exactMatch and regexMatch must be set.
          bool   present_match = 3;

          // The queryParameterMatch matches if the value of the parameter matches the
          // regular expression specified by regexMatch. For the regular expression grammar,
          // please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
          // exactMatch and regexMatch must be set.
          string regex_match = 4;
        }
        repeated QueryParameterMatches query_parameter_matches = 7;
      }
      repeated MatchRules match_rules = 4;
      message RouteAction {
        message CorsPolicy {

          // In response to a preflight request, setting this to true indicates that the
          // actual request can include user credentials. This translates to the Access-
          // Control-Allow-Credentials header. Defaults to false.
          bool   allow_credentials = 1;

          // Specifies the content for the Access-Control-Allow-Headers header.
          repeated string allow_headers = 2;

          // Specifies the content for the Access-Control-Allow-Methods header.
          repeated string allow_methods = 3;

          // Specifies the regualar expression patterns that match allowed origins. For
          // regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
          // An origin is allowed if it matches either allow_origins or allow_origin_regex.
          repeated string allow_origin_regexes = 4;

          // Specifies the list of origins that will be allowed to do CORS requests. An
          // origin is allowed if it matches either allow_origins or allow_origin_regex.
          repeated string allow_origins = 5;

          // If true, specifies the CORS policy is disabled.
          // which indicates that the CORS policy is in effect. Defaults to false.
          bool   disabled = 6;

          // Specifies the content for the Access-Control-Expose-Headers header.
          repeated string expose_headers = 7;

          // Specifies how long the results of a preflight request can be cached. This
          // translates to the content for the Access-Control-Max-Age header.
          int64  max_age = 8;
        }
        repeated CorsPolicy cors_policy = 1;
        message FaultInjectionPolicy {
          message Abort {

            // The HTTP status code used to abort the request. The value must be between 200
            // and 599 inclusive.
            int64  http_status = 1;

            // The percentage of traffic (connections/operations/requests) which will be
            // aborted as part of fault injection. The value must be between 0.0 and 100.0
            // inclusive.
            int64  percentage = 2;
          }
          repeated Abort abort = 1;
          message Delay {

            // The percentage of traffic (connections/operations/requests) on which delay will
            // be introduced as part of fault injection. The value must be between 0.0 and
            // 100.0 inclusive.
            int64  percentage = 1;
            message FixedDelay {

              // Span of time that's a fraction of a second at nanosecond resolution. Durations
              // less than one second are represented with a 0 'seconds' field and a positive
              // 'nanos' field. Must be from 0 to 999,999,999 inclusive.
              int64  nanos = 1;

              // Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
              // inclusive.
              string seconds = 2;
            }
            repeated FixedDelay fixed_delay = 2;
          }
          repeated Delay delay = 2;
        }
        repeated FaultInjectionPolicy fault_injection_policy = 2;
        message RequestMirrorPolicy {

          // The BackendService resource being mirrored to.
          string backend_service = 1;
        }
        repeated RequestMirrorPolicy request_mirror_policy = 3;
        message RetryPolicy {

          // Specifies the allowed number retries. This number must be > 0.
          int64  num_retries = 1;

          // Specfies one or more conditions when this retry rule applies. Valid values are:
          // - 5xx: Loadbalancer will attempt a retry if the backend service responds with
          //   any 5xx response code, or if the backend service does not respond at all,
          //   example: disconnects, reset, read timeout, connection failure, and refused
          //   streams.
          // - gateway-error: Similar to 5xx, but only applies to response codes
          //   502, 503 or 504.
          // - connect-failure: Loadbalancer will retry on failures
          //   connecting to backend services, for example due to connection timeouts.
          // - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
          //   Currently the only retriable error supported is 409.
          // - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
          //   REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
          // - cancelled: Loadbalancer will retry if the gRPC status code in the response
          //   header is set to cancelled
          // - deadline-exceeded: Loadbalancer will retry if the
          //   gRPC status code in the response header is set to deadline-exceeded
          // - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
          //   header is set to resource-exhausted
          // - unavailable: Loadbalancer will retry if the gRPC status code in
          //   the response header is set to unavailable
          repeated string retry_conditions = 2;
          message PerTryTimeout {

            // Span of time that's a fraction of a second at nanosecond resolution. Durations
            // less than one second are represented with a 0 'seconds' field and a positive
            // 'nanos' field. Must be from 0 to 999,999,999 inclusive.
            int64  nanos = 1;

            // Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
            // inclusive.
            string seconds = 2;
          }
          repeated PerTryTimeout per_try_timeout = 3;
        }
        repeated RetryPolicy retry_policy = 4;
        message Timeout {

          // Span of time that's a fraction of a second at nanosecond resolution. Durations
          // less than one second are represented with a 0 'seconds' field and a positive
          // 'nanos' field. Must be from 0 to 999,999,999 inclusive.
          int64  nanos = 1;

          // Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
          // inclusive.
          string seconds = 2;
        }
        repeated Timeout timeout = 5;
        message UrlRewrite {

          // Prior to forwarding the request to the selected service, the request's host
          // header is replaced with contents of hostRewrite. The value must be between 1 and
          // 255 characters.
          string host_rewrite = 1;

          // Prior to forwarding the request to the selected backend service, the matching
          // portion of the request's path is replaced by pathPrefixRewrite. The value must
          // be between 1 and 1024 characters.
          string path_prefix_rewrite = 2;
        }
        repeated UrlRewrite url_rewrite = 6;
        message WeightedBackendServices {

          // The default BackendService resource. Before
          // forwarding the request to backendService, the loadbalancer applies any relevant
          // headerActions specified as part of this backendServiceWeight.
          string backend_service = 1;

          // Specifies the fraction of traffic sent to backendService, computed as weight /
          // (sum of all weightedBackendService weights in routeAction) . The selection of a
          // backend service is determined only for new traffic. Once a user's request has
          // been directed to a backendService, subsequent requests will be sent to the same
          // backendService as determined by the BackendService's session affinity policy.
          // The value must be between 0 and 1000
          int64  weight = 2;
          message HeaderAction {

            // A list of header names for headers that need to be removed from the request
            // prior to forwarding the request to the backendService.
            repeated string request_headers_to_remove = 1;

            // A list of header names for headers that need to be removed from the response
            // prior to sending the response back to the client.
            repeated string response_headers_to_remove = 2;
            message RequestHeadersToAdd {

              // The name of the header.
              string header_name = 1;

              // The value of the header to add.
              string header_value = 2;

              // If false, headerValue is appended to any values that already exist for the
              // header. If true, headerValue is set for the header, discarding any values that
              // were set for that header.
              bool   replace = 3;
            }
            repeated RequestHeadersToAdd request_headers_to_add = 3;
            message ResponseHeadersToAdd {

              // The name of the header.
              string header_name = 1;

              // The value of the header to add.
              string header_value = 2;

              // If false, headerValue is appended to any values that already exist for the
              // header. If true, headerValue is set for the header, discarding any values that
              // were set for that header.
              bool   replace = 3;
            }
            repeated ResponseHeadersToAdd response_headers_to_add = 4;
          }
          repeated HeaderAction header_action = 3;
        }
        repeated WeightedBackendServices weighted_backend_services = 7;
      }
      repeated RouteAction route_action = 5;
      message UrlRedirect {

        // The host that will be used in the redirect response instead of the one that was
        // supplied in the request. The value must be between 1 and 255 characters.
        string host_redirect = 1;

        // If set to true, the URL scheme in the redirected request is set to https. If set
        // to false, the URL scheme of the redirected request will remain the same as that
        // of the request. This must only be set for UrlMaps used in TargetHttpProxys.
        // Setting this true for TargetHttpsProxy is not permitted. Defaults to false.
        bool   https_redirect = 2;

        // The path that will be used in the redirect response instead of the one that was
        // supplied in the request. Only one of pathRedirect or prefixRedirect must be
        // specified. The value must be between 1 and 1024 characters.
        string path_redirect = 3;

        // The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
        // retaining the remaining portion of the URL before redirecting the request.
        string prefix_redirect = 4;

        // The HTTP Status code to use for this RedirectAction. Supported values are:   -
        // MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.  -
        // FOUND, which corresponds to 302.  - SEE_OTHER which corresponds to 303.  -
        // TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
        // will be retained.  - PERMANENT_REDIRECT, which corresponds to 308. In this case,
        // the request method will be retained.
        string redirect_response_code = 5;

        // If set to true, any accompanying query portion of the original URL is removed
        // prior to redirecting the request. If set to false, the query portion of the
        // original URL is retained. Defaults to false.
        bool   strip_query = 6;
      }
      repeated UrlRedirect url_redirect = 6;
    }
    repeated RouteRules route_rules = 6;
  }
  repeated PathMatcher path_matcher = 12;
  message Test {

    // Description of this test case.
    string description = 1;

    // Host portion of the URL.
    string host = 2;

    // Path portion of the URL.
    string path = 3;

    // The backend service or backend bucket link that should be matched by this test.
    string service = 4;
  }
  repeated Test test = 13;
  message Timeouts {
    string create = 1;
    string delete = 2;
    string update = 3;
  }
  Timeouts timeouts = 14;
}