syntax="proto3";

package google;

message GoogleComputeSnapshot {

  // Creation timestamp in RFC3339 text format.
  string creation_timestamp = 1;

  // An optional description of this resource.
  string description = 2;

  // Size of the snapshot, specified in GB.
  int64  disk_size_gb = 3;
  string id = 4;

  // The fingerprint used for optimistic locking of this resource. Used
  // internally during updates.
  string label_fingerprint = 5;

  // Labels to apply to this Snapshot.
  map<string, string> labels = 6;

  // A list of public visible licenses that apply to this snapshot. This
  // can be because the original image had licenses attached (such as a
  // Windows image).  snapshotEncryptionKey nested object Encrypts the
  // snapshot using a customer-supplied encryption key.
  repeated string licenses = 7;

  // Name of the resource; provided by the client when the resource is
  // created. The name must be 1-63 characters long, and comply with
  // RFC1035. Specifically, the name must be 1-63 characters long and match
  // the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
  // first character must be a lowercase letter, and all following
  // characters must be a dash, lowercase letter, or digit, except the last
  // character, which cannot be a dash.
  string name = 8;
  string project = 9;
  string self_link = 10;

  // The unique identifier for the resource.
  int64  snapshot_id = 11;

  // A reference to the disk used to create this snapshot.
  string source_disk = 12;
  string source_disk_link = 13;

  // A size of the the storage used by the snapshot. As snapshots share
  // storage, this number is expected to change with snapshot
  // creation/deletion.
  int64  storage_bytes = 14;

  // A reference to the zone where the disk is hosted.
  string zone = 15;
  message SnapshotEncryptionKey {

    // Specifies a 256-bit customer-supplied encryption key, encoded in
    // RFC 4648 base64 to either encrypt or decrypt this resource.
    string raw_key = 1;

    // The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    // encryption key that protects this resource.
    string sha256 = 2;
  }
  repeated SnapshotEncryptionKey snapshot_encryption_key = 16;
  message SourceDiskEncryptionKey {

    // Specifies a 256-bit customer-supplied encryption key, encoded in
    // RFC 4648 base64 to either encrypt or decrypt this resource.
    string raw_key = 1;
  }
  repeated SourceDiskEncryptionKey source_disk_encryption_key = 17;
  message Timeouts {
    string create = 1;
    string delete = 2;
    string update = 3;
  }
  Timeouts timeouts = 18;
}