syntax="proto3";

package google;

message GoogleDeploymentManagerDeployment {

  // Set the policy to use for creating new resources. Only used on
  // create and update. Valid values are 'CREATE_OR_ACQUIRE' (default) or
  // 'ACQUIRE'. If set to 'ACQUIRE' and resources do not already exist,
  // the deployment will fail. Note that updating this field does not
  // actually affect the deployment, just how it is updated.
  string create_policy = 1;

  // Set the policy to use for deleting new resources on update/delete.
  // Valid values are 'DELETE' (default) or 'ABANDON'. If 'DELETE',
  // resource is deleted after removal from Deployment Manager. If
  // 'ABANDON', the resource is only removed from Deployment Manager
  // and is not actually deleted. Note that updating this field does not
  // actually change the deployment, just how it is updated.
  string delete_policy = 2;

  // Unique identifier for deployment. Output only.
  string deployment_id = 3;

  // Optional user-provided description of deployment.
  string description = 4;
  string id = 5;

  // Output only. URL of the manifest representing the last manifest that
  // was successfully deployed.
  string manifest = 6;

  // Unique name for the deployment
  string name = 7;

  // If set to true, a deployment is created with "shell" resources
  // that are not actually instantiated. This allows you to preview a
  // deployment. It can be updated to false to actually deploy
  // with real resources.
  //  ~>**NOTE**: Deployment Manager does not allow update
  // of a deployment in preview (unless updating to preview=false). Thus,
  // Terraform will force-recreate deployments if either preview is updated
  // to true or if other fields are updated while preview is true.
  bool   preview = 8;
  string project = 9;

  // Output only. Server defined URL for the resource.
  string self_link = 10;
  message Labels {

    // Key for label.
    string key = 1;

    // Value of label.
    string value = 2;
  }
  repeated Labels labels = 11;
  message Target {
    message Config {

      // The full YAML contents of your configuration file.
      string content = 1;
    }
    repeated Config config = 1;
    message Imports {

      // The full contents of the template that you want to import.
      string content = 1;

      // The name of the template to import, as declared in the YAML
      // configuration.
      string name = 2;
    }
    repeated Imports imports = 2;
  }
  repeated Target target = 12;
  message Timeouts {
    string create = 1;
    string delete = 2;
    string update = 3;
  }
  Timeouts timeouts = 13;
}