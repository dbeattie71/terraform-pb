syntax="proto3";

package google;

message GoogleAppEngineStandardAppVersion {
  bool   delete_service_on_destroy = 1;

  // Environment variables available to the application.
  map<string, string> env_variables = 2;
  string id = 3;

  // Instance class that is used to run this version. Valid values are
  // AutomaticScaling F1, F2, F4, F4_1G
  // (Only AutomaticScaling is supported at the moment)
  string instance_class = 4;

  // Full path to the Version resource in the API. Example, "v1".
  string name = 5;
  bool   noop_on_destroy = 6;
  string project = 7;

  // Desired runtime. Example python27.
  string runtime = 8;

  // The version of the API in the given runtime environment. 
  // Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard//config/appref
  string runtime_api_version = 9;

  // AppEngine service resource
  string service = 10;

  // Whether multiple requests can be dispatched to this version at once.
  bool   threadsafe = 11;

  // Relative name of the version within the service. For example, 'v1'. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
  string version_id = 12;
  message Deployment {
    message Files {
      string name = 1;

      // SHA1 checksum of the file
      string sha1_sum = 2;

      // Source URL
      string source_url = 3;
    }
    repeated Files files = 1;
    message Zip {

      // files count
      int64  files_count = 1;

      // Source URL
      string source_url = 2;
    }
    repeated Zip zip = 2;
  }
  repeated Deployment deployment = 13;
  message Entrypoint {

    // The format should be a shell command that can be fed to bash -c.
    string shell = 1;
  }
  repeated Entrypoint entrypoint = 14;
  message Handlers {

    // Actions to take when the user is not logged in.
    string auth_fail_action = 1;

    // Methods to restrict access to a URL based on login status.
    string login = 2;

    // 30x code to use when performing redirects for the secure field.
    string redirect_http_response_code = 3;

    // Security (HTTPS) enforcement for this URL.
    string security_level = 4;

    // URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. 
    // All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
    string url_regex = 5;
    message Script {

      // Path to the script from the application root directory.
      string script_path = 1;
    }
    repeated Script script = 6;
    message StaticFiles {

      // Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
      bool   application_readable = 1;

      // Time a static file served by this handler should be cached by web proxies and browsers.
      // A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
      string expiration = 2;

      // HTTP headers to use for all responses from these URLs.
      // An object containing a list of "key:value" value pairs.".
      map<string, string> http_headers = 3;

      // MIME type used to serve all files served by this handler.
      // Defaults to file-specific MIME types, which are derived from each file's filename extension.
      string mime_type = 4;

      // Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
      string path = 5;

      // Whether this handler should match the request if the file referenced by the handler does not exist.
      bool   require_matching_file = 6;

      // Regular expression that matches the file paths for all files that should be referenced by this handler.
      string upload_path_regex = 7;
    }
    repeated StaticFiles static_files = 7;
  }
  repeated Handlers handlers = 15;
  message Libraries {

    // Name of the library. Example "django".
    string name = 1;

    // Version of the library to select, or "latest".
    string version = 2;
  }
  repeated Libraries libraries = 16;
  message Timeouts {
    string create = 1;
    string delete = 2;
    string update = 3;
  }
  Timeouts timeouts = 17;
}