syntax="proto3";

package google;

message GoogleComputeBackendService {

  // Lifetime of cookies in seconds if session_affinity is
  // GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
  // only until the end of the browser session (or equivalent). The
  // maximum allowed value for TTL is one day.
  // 
  // When the load balancing scheme is INTERNAL, this field is not used.
  int64  affinity_cookie_ttl_sec = 1;

  // Time for which instance will be drained (not accept new
  // connections, but still work to finish started).
  int64  connection_draining_timeout_sec = 2;

  // Creation timestamp in RFC3339 text format.
  string creation_timestamp = 3;

  // An optional description of this resource.
  string description = 4;

  // If true, enable Cloud CDN for this BackendService.
  bool   enable_cdn = 5;

  // Fingerprint of this resource. A hash of the contents stored in this
  // object. This field is used in optimistic locking.
  string fingerprint = 6;

  // The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
  // for health checking this BackendService. Currently at most one health
  // check can be specified, and a health check is required.
  // 
  // For internal load balancing, a URL to a HealthCheck resource must be specified instead.
  repeated string health_checks = 7;
  string id = 8;

  // Indicates whether the backend service will be used with internal or
  // external load balancing. A backend service created for one type of
  // load balancing cannot be used with the other. Must be 'EXTERNAL' or
  // 'INTERNAL_SELF_MANAGED' for a global backend service. Defaults to 'EXTERNAL'.
  string load_balancing_scheme = 9;

  // Name of the resource. Provided by the client when the resource is
  // created. The name must be 1-63 characters long, and comply with
  // RFC1035. Specifically, the name must be 1-63 characters long and match
  // the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
  // first character must be a lowercase letter, and all following
  // characters must be a dash, lowercase letter, or digit, except the last
  // character, which cannot be a dash.
  string name = 10;

  // Name of backend port. The same name should appear in the instance
  // groups referenced by this service. Required when the load balancing
  // scheme is EXTERNAL.
  string port_name = 11;
  string project = 12;

  // The protocol this BackendService uses to communicate with backends.
  // Possible values are HTTP, HTTPS, HTTP2, TCP, and SSL. The default is
  // HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
  // types and may result in errors if used with the GA API.
  string protocol = 13;

  // The security policy associated with this backend service.
  string security_policy = 14;
  string self_link = 15;

  // Type of session affinity to use. The default is NONE. Session affinity is
  // not applicable if the protocol is UDP.
  string session_affinity = 16;

  // How many seconds to wait for the backend before considering it a
  // failed request. Default is 30 seconds. Valid range is [1, 86400].
  int64  timeout_sec = 17;
  message Backend {

    // Specifies the balancing mode for this backend.
    // 
    // For global HTTP(S) or TCP/SSL load balancing, the default is
    // UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
    // and CONNECTION (for TCP/SSL).
    string balancing_mode = 1;

    // A multiplier applied to the group's maximum servicing capacity
    // (based on UTILIZATION, RATE or CONNECTION).
    // 
    // Default value is 1, which means the group will serve up to 100%
    // of its configured capacity (depending on balancingMode). A
    // setting of 0 means the group is completely drained, offering
    // 0% of its available Capacity. Valid range is [0.0,1.0].
    int64  capacity_scaler = 2;

    // An optional description of this resource.
    // Provide this property when you create the resource.
    string description = 3;

    // The fully-qualified URL of an Instance Group or Network Endpoint
    // Group resource. In case of instance group this defines the list
    // of instances that serve traffic. Member virtual machine
    // instances from each instance group must live in the same zone as
    // the instance group itself. No two backends in a backend service
    // are allowed to use same Instance Group resource.
    // 
    // For Network Endpoint Groups this defines list of endpoints. All
    // endpoints of Network Endpoint Group must be hosted on instances
    // located in the same zone as the Network Endpoint Group.
    // 
    // Backend services cannot mix Instance Group and
    // Network Endpoint Group backends.
    // 
    // Note that you must specify an Instance Group or Network Endpoint
    // Group resource using the fully-qualified URL, rather than a
    // partial URL.
    string group = 4;

    // The max number of simultaneous connections for the group. Can
    // be used with either CONNECTION or UTILIZATION balancing modes.
    // 
    // For CONNECTION mode, either maxConnections or one
    // of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    // as appropriate for group type, must be set.
    int64  max_connections = 5;

    // The max number of simultaneous connections that a single backend
    // network endpoint can handle. This is used to calculate the
    // capacity of the group. Can be used in either CONNECTION or
    // UTILIZATION balancing modes.
    // 
    // For CONNECTION mode, either
    // maxConnections or maxConnectionsPerEndpoint must be set.
    int64  max_connections_per_endpoint = 6;

    // The max number of simultaneous connections that a single
    // backend instance can handle. This is used to calculate the
    // capacity of the group. Can be used in either CONNECTION or
    // UTILIZATION balancing modes.
    // 
    // For CONNECTION mode, either maxConnections or
    // maxConnectionsPerInstance must be set.
    int64  max_connections_per_instance = 7;

    // The max requests per second (RPS) of the group.
    // 
    // Can be used with either RATE or UTILIZATION balancing modes,
    // but required if RATE mode. For RATE mode, either maxRate or one
    // of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    // group type, must be set.
    int64  max_rate = 8;

    // The max requests per second (RPS) that a single backend network
    // endpoint can handle. This is used to calculate the capacity of
    // the group. Can be used in either balancing mode. For RATE mode,
    // either maxRate or maxRatePerEndpoint must be set.
    int64  max_rate_per_endpoint = 9;

    // The max requests per second (RPS) that a single backend
    // instance can handle. This is used to calculate the capacity of
    // the group. Can be used in either balancing mode. For RATE mode,
    // either maxRate or maxRatePerInstance must be set.
    int64  max_rate_per_instance = 10;

    // Used when balancingMode is UTILIZATION. This ratio defines the
    // CPU utilization target for the group. The default is 0.8. Valid
    // range is [0.0, 1.0].
    int64  max_utilization = 11;
  }
  repeated Backend backend = 18;
  message CdnPolicy {

    // Maximum number of seconds the response to a signed URL request
    // will be considered fresh, defaults to 1hr (3600s). After this
    // time period, the response will be revalidated before
    // being served.
    // 
    // When serving responses to signed URL requests, Cloud CDN will
    // internally behave as though all responses from this backend had a
    // "Cache-Control: public, max-age=[TTL]" header, regardless of any
    // existing Cache-Control header. The actual headers served in
    // responses will not be altered.
    int64  signed_url_cache_max_age_sec = 1;
    message CacheKeyPolicy {

      // If true requests to different hosts will be cached separately.
      bool   include_host = 1;

      // If true, http and https requests will be cached separately.
      bool   include_protocol = 2;

      // If true, include query string parameters in the cache key
      // according to query_string_whitelist and
      // query_string_blacklist. If neither is set, the entire query
      // string will be included.
      // 
      // If false, the query string will be excluded from the cache
      // key entirely.
      bool   include_query_string = 3;

      // Names of query string parameters to exclude in cache keys.
      // 
      // All other parameters will be included. Either specify
      // query_string_whitelist or query_string_blacklist, not both.
      // '&' and '=' will be percent encoded and not treated as
      // delimiters.
      repeated string query_string_blacklist = 4;

      // Names of query string parameters to include in cache keys.
      // 
      // All other parameters will be excluded. Either specify
      // query_string_whitelist or query_string_blacklist, not both.
      // '&' and '=' will be percent encoded and not treated as
      // delimiters.
      repeated string query_string_whitelist = 5;
    }
    repeated CacheKeyPolicy cache_key_policy = 2;
  }
  repeated CdnPolicy cdn_policy = 19;
  message Iap {

    // OAuth2 Client ID for IAP
    string oauth2_client_id = 1;

    // OAuth2 Client Secret for IAP
    string oauth2_client_secret = 2;

    // OAuth2 Client Secret SHA-256 for IAP
    string oauth2_client_secret_sha256 = 3;
  }
  repeated Iap iap = 20;
  message Timeouts {
    string create = 1;
    string delete = 2;
    string update = 3;
  }
  Timeouts timeouts = 21;
}