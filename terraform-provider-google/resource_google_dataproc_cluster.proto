syntax "proto3";

package google;

message GoogleDataprocCluster {
  id = 1;
  labels = 2;
  name = 3;
  project = 4;
  region = 5;
  message ClusterConfig {
    bucket = 1;
    staging_bucket = 2;
    message AutoscalingConfig {
      policy_uri = 1;
    }
    autoscaling_config = 3;
    message EncryptionConfig {
      kms_key_name = 1;
    }
    encryption_config = 4;
    message GceClusterConfig {
      internal_ip_only = 1;
      metadata = 2;
      network = 3;
      service_account = 4;
      service_account_scopes = 5;
      subnetwork = 6;
      tags = 7;
      zone = 8;
    }
    gce_cluster_config = 5;
    message InitializationAction {
      script = 1;
      timeout_sec = 2;
    }
    initialization_action = 6;
    message MasterConfig {
      image_uri = 1;
      instance_names = 2;
      machine_type = 3;
      min_cpu_platform = 4;
      num_instances = 5;
      message Accelerators {
        accelerator_count = 1;
        accelerator_type = 2;
      }
      accelerators = 6;
      message DiskConfig {
        boot_disk_size_gb = 1;
        boot_disk_type = 2;
        num_local_ssds = 3;
      }
      disk_config = 7;
    }
    master_config = 7;
    message PreemptibleWorkerConfig {
      instance_names = 1;
      num_instances = 2;
      message DiskConfig {
        boot_disk_size_gb = 1;
        boot_disk_type = 2;
        num_local_ssds = 3;
      }
      disk_config = 3;
    }
    preemptible_worker_config = 8;
    message SecurityConfig {
      message KerberosConfig {

        // The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
        cross_realm_trust_admin_server = 1;

        // The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
        cross_realm_trust_kdc = 2;

        // The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
        cross_realm_trust_realm = 3;

        // The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster
Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
        cross_realm_trust_shared_password_uri = 4;

        // Flag to indicate whether to Kerberize the cluster.
        enable_kerberos = 5;

        // The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
        kdc_db_key_uri = 6;

        // The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
        key_password_uri = 7;

        // The Cloud Storage URI of a KMS encrypted file containing
the password to the user provided keystore. For the self-signed certificate, this password is generated
by Dataproc
        keystore_password_uri = 8;

        // The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
        keystore_uri = 9;

        // The uri of the KMS key used to encrypt various sensitive files.
        kms_key_uri = 10;

        // The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
        realm = 11;

        // The cloud Storage URI of a KMS encrypted file containing the root principal password.
        root_principal_password_uri = 12;

        // The lifetime of the ticket granting ticket, in hours.
        tgt_lifetime_hours = 13;

        // The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
        truststore_password_uri = 14;

        // The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
        truststore_uri = 15;
      }
      kerberos_config = 1;
    }
    security_config = 9;
    message SoftwareConfig {
      image_version = 1;
      optional_components = 2;
      override_properties = 3;
      properties = 4;
    }
    software_config = 10;
    message WorkerConfig {
      image_uri = 1;
      instance_names = 2;
      machine_type = 3;
      min_cpu_platform = 4;
      num_instances = 5;
      message Accelerators {
        accelerator_count = 1;
        accelerator_type = 2;
      }
      accelerators = 6;
      message DiskConfig {
        boot_disk_size_gb = 1;
        boot_disk_type = 2;
        num_local_ssds = 3;
      }
      disk_config = 7;
    }
    worker_config = 11;
  }
  cluster_config = 6;
  message Timeouts {
    create = 1;
    delete = 2;
    update = 3;
  }
  timeouts = 7;
}