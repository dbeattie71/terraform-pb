syntax "proto3";

package google;

message GoogleAccessContextManagerAccessLevel {

  // Description of the AccessLevel and its use. Does not affect behavior.
  description = 1;
  id = 2;

  // Resource name for the Access Level. The short_name component must begin
with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
  name = 3;

  // The AccessPolicy this AccessLevel lives in.
Format: accessPolicies/{policy_id}
  parent = 4;

  // Human readable title. Must be unique within the Policy.
  title = 5;
  message Basic {

    // How the conditions list should be combined to determine if a request
is granted this AccessLevel. If AND is used, each Condition in
conditions must be satisfied for the AccessLevel to be applied. If
OR is used, at least one Condition in conditions must be satisfied
for the AccessLevel to be applied. Defaults to AND if unspecified.
    combining_function = 1;
    message Conditions {

      // A list of CIDR block IP subnetwork specification. May be IPv4
or IPv6.
Note that for a CIDR IP address block, the specified IP address
portion must be properly truncated (i.e. all the host bits must
be zero) or the input is considered malformed. For example,
"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
is not. The originating IP of a request must be in one of the
listed subnets in order for this Condition to be true.
If empty, all IP addresses are allowed.
      ip_subnetworks = 1;

      // An allowed list of members (users, service accounts).
Using groups is not supported yet.

The signed-in user originating the request must be a part of one
of the provided members. If not specified, a request may come
from any user (logged in/not logged in, not present in any
groups, etc.).
Formats: 'user:{emailid}', 'serviceAccount:{emailid}'
      members = 2;

      // Whether to negate the Condition. If true, the Condition becomes
a NAND over its non-empty fields, each field must be false for
the Condition overall to be satisfied. Defaults to false.
      negate = 3;

      // The request must originate from one of the provided
countries/regions.
Format: A valid ISO 3166-1 alpha-2 code.
      regions = 4;

      // A list of other access levels defined in the same Policy,
referenced by resource name. Referencing an AccessLevel which
does not exist is an error. All access levels listed must be
granted for the Condition to be true.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
      required_access_levels = 5;
      message DevicePolicy {

        // A list of allowed device management levels.
An empty list allows all management levels.
        allowed_device_management_levels = 1;

        // A list of allowed encryptions statuses.
An empty list allows all statuses.
        allowed_encryption_statuses = 2;

        // Whether the device needs to be approved by the customer admin.
        require_admin_approval = 3;

        // Whether the device needs to be corp owned.
        require_corp_owned = 4;

        // Whether or not screenlock is required for the DevicePolicy
to be true. Defaults to false.
        require_screen_lock = 5;
        message OsConstraints {

          // The minimum allowed OS version. If not set, any version
of this OS satisfies the constraint.
Format: "major.minor.patch" such as "10.5.301", "9.2.1".
          minimum_version = 1;

          // The operating system type of the device.
          os_type = 2;
        }
        os_constraints = 6;
      }
      device_policy = 6;
    }
    conditions = 2;
  }
  basic = 6;
  message Timeouts {
    create = 1;
    delete = 2;
    update = 3;
  }
  timeouts = 7;
}