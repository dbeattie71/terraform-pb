syntax "proto3";

package azurerm;

message AzurermFrontdoor {
  cname = 1;
  enforce_backend_pools_certificate_name_check = 2;
  friendly_name = 3;
  id = 4;
  load_balancer_enabled = 5;
  location = 6;
  name = 7;
  resource_group_name = 8;
  tags = 9;
  message BackendPool {
    health_probe_name = 1;
    id = 2;
    load_balancing_name = 3;
    name = 4;
    message Backend {
      address = 1;
      enabled = 2;
      host_header = 3;
      http_port = 4;
      https_port = 5;
      priority = 6;
      weight = 7;
    }
    backend = 5;
  }
  backend_pool = 10;
  message BackendPoolHealthProbe {
    enabled = 1;
    id = 2;
    interval_in_seconds = 3;
    name = 4;
    path = 5;
    probe_method = 6;
    protocol = 7;
  }
  backend_pool_health_probe = 11;
  message BackendPoolLoadBalancing {
    additional_latency_milliseconds = 1;
    id = 2;
    name = 3;
    sample_size = 4;
    successful_samples_required = 5;
  }
  backend_pool_load_balancing = 12;
  message FrontendEndpoint {
    custom_https_provisioning_enabled = 1;
    host_name = 2;
    id = 3;
    name = 4;
    session_affinity_enabled = 5;
    session_affinity_ttl_seconds = 6;
    web_application_firewall_policy_link_id = 7;
    message CustomHttpsConfiguration {
      azure_key_vault_certificate_secret_name = 1;
      azure_key_vault_certificate_secret_version = 2;
      azure_key_vault_certificate_vault_id = 3;
      certificate_source = 4;
      minimum_tls_version = 5;
      provisioning_state = 6;
      provisioning_substate = 7;
    }
    custom_https_configuration = 8;
  }
  frontend_endpoint = 13;
  message RoutingRule {
    accepted_protocols = 1;
    enabled = 2;
    frontend_endpoints = 3;
    id = 4;
    name = 5;
    patterns_to_match = 6;
    message ForwardingConfiguration {
      backend_pool_name = 1;
      cache_enabled = 2;
      cache_query_parameter_strip_directive = 3;
      cache_use_dynamic_compression = 4;
      custom_forwarding_path = 5;
      forwarding_protocol = 6;
    }
    forwarding_configuration = 7;
    message RedirectConfiguration {
      custom_fragment = 1;
      custom_host = 2;
      custom_path = 3;
      custom_query_string = 4;
      redirect_protocol = 5;
      redirect_type = 6;
    }
    redirect_configuration = 8;
  }
  routing_rule = 14;
  message Timeouts {
    create = 1;
    delete = 2;
    read = 3;
    update = 4;
  }
  timeouts = 15;
}